{
    "project": {
        "name": "EasyNode API参考文档",
        "description": "EasyNode API文档",
        "version": "EasyNode - 0.1.0"
    },
    "files": {
        "../src/easynode/framework/aop/AOP.js": {
            "name": "../src/easynode/framework/aop/AOP.js",
            "modules": {},
            "classes": {
                "easynode.framework.aop.AOP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/aop/ActionAOP.js": {
            "name": "../src/easynode/framework/aop/ActionAOP.js",
            "modules": {},
            "classes": {
                "easynode.framework.ActionAOP.ActionAOP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/cache/CacheStat.js": {
            "name": "../src/easynode/framework/cache/CacheStat.js",
            "modules": {},
            "classes": {
                "easynode.framework.cache.CacheStat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/cache/ICache.js": {
            "name": "../src/easynode/framework/cache/ICache.js",
            "modules": {},
            "classes": {
                "easynode.framework.cache.ICache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/cache/Memcached.js": {
            "name": "../src/easynode/framework/cache/Memcached.js",
            "modules": {},
            "classes": {
                "easynode.framework.cache.Memcached": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/cache/Redis.js": {
            "name": "../src/easynode/framework/cache/Redis.js",
            "modules": {},
            "classes": {
                "easynode.framework.cache.Redis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/db/IConnection.js": {
            "name": "../src/easynode/framework/db/IConnection.js",
            "modules": {},
            "classes": {
                "easynode.framework.db.IConnection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/db/IDataSource.js": {
            "name": "../src/easynode/framework/db/IDataSource.js",
            "modules": {},
            "classes": {
                "easynode.framework.db.IDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/db/MysqlConnection.js": {
            "name": "../src/easynode/framework/db/MysqlConnection.js",
            "modules": {},
            "classes": {
                "easynode.framework.db.MysqlConnection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/db/MysqlDataSource.js": {
            "name": "../src/easynode/framework/db/MysqlDataSource.js",
            "modules": {},
            "classes": {
                "easynode.framework.db.MysqlDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mq/IQueue.js": {
            "name": "../src/easynode/framework/mq/IQueue.js",
            "modules": {},
            "classes": {
                "easynode.framework.mq.IQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mq/MQTTQueue.js": {
            "name": "../src/easynode/framework/mq/MQTTQueue.js",
            "modules": {},
            "classes": {
                "easynode.framework.queue.MQTTQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mq/RedisListQueue.js": {
            "name": "../src/easynode/framework/mq/RedisListQueue.js",
            "modules": {},
            "classes": {
                "easynode.framework.mq.RedisListQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mq/RedisQueue.js": {
            "name": "../src/easynode/framework/mq/RedisQueue.js",
            "modules": {},
            "classes": {
                "easynode.framework.mq.RedisQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js": {
            "name": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.spi.MysqlModelGenerator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/Action.js": {
            "name": "../src/easynode/framework/mvc/Action.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.Action": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionArgConverter.js": {
            "name": "../src/easynode/framework/mvc/ActionArgConverter.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionArgConverter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionContext.js": {
            "name": "../src/easynode/framework/mvc/ActionContext.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionExecutor.js": {
            "name": "../src/easynode/framework/mvc/ActionExecutor.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionExecutor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionFactory.js": {
            "name": "../src/easynode/framework/mvc/ActionFactory.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionFilter.js": {
            "name": "../src/easynode/framework/mvc/ActionFilter.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionRequestParameter.js": {
            "name": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionRequestParameter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ActionResult.js": {
            "name": "../src/easynode/framework/mvc/ActionResult.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ActionResult": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/CombinedAction.js": {
            "name": "../src/easynode/framework/mvc/CombinedAction.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.CombinedAction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/EJSTemplateViewRenderer.js": {
            "name": "../src/easynode/framework/mvc/EJSTemplateViewRenderer.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.EJSTemplateViewRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/IActionContextListener.js": {
            "name": "../src/easynode/framework/mvc/IActionContextListener.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.IActionContextListener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ITemplateViewRenderer.js": {
            "name": "../src/easynode/framework/mvc/ITemplateViewRenderer.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ITemplateViewRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/JSONView.js": {
            "name": "../src/easynode/framework/mvc/JSONView.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.JSONView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/JadeTemplateViewRenderer.js": {
            "name": "../src/easynode/framework/mvc/JadeTemplateViewRenderer.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.JadeTemplateViewRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/MethodDispatchedAction.js": {
            "name": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.MethodDispatchedAction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/Model.js": {
            "name": "../src/easynode/framework/mvc/Model.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ModelField.js": {
            "name": "../src/easynode/framework/mvc/ModelField.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ModelField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/ModelProxyActionFactory.js": {
            "name": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.ModelProxyActionFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/MustacheTemplateViewRenderer.js": {
            "name": "../src/easynode/framework/mvc/MustacheTemplateViewRenderer.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.MustacheTemplateViewRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/TemplateView.js": {
            "name": "../src/easynode/framework/mvc/TemplateView.js",
            "modules": {},
            "classes": {
                "easynode.framework.view.TemplateView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/mvc/View.js": {
            "name": "../src/easynode/framework/mvc/View.js",
            "modules": {},
            "classes": {
                "easynode.framework.mvc.View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/plugin/EasyNodePlugin.js": {
            "name": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "modules": {},
            "classes": {
                "easynode.framework.plugin.EasyNodePlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/plugin/PluginLoadContext.js": {
            "name": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "modules": {},
            "classes": {
                "easynode.framework.plugin.PluginLoadContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/http/KOAActionContext.js": {
            "name": "../src/easynode/framework/server/http/KOAActionContext.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.http.KOAActionContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/http/KOADefaultRoutes.js": {
            "name": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.http.KOADefaultRoutes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/http/KOAHttpRequestParameter.js": {
            "name": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.http.KOAHttpRequestParameter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/http/KOAHttpServer.js": {
            "name": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.http.KOAHttpServer": 1,
                "easynode.framework.server.http.KOAHttpServer.SessionSupport": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/http/KOAMemorySessionStorage.js": {
            "name": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.KOAMemorySessionStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/protocols/JSONDecoder.js": {
            "name": "../src/easynode/framework/server/tcp/protocols/JSONDecoder.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.protocols.JSONDecoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/protocols/JSONEncoder.js": {
            "name": "../src/easynode/framework/server/tcp/protocols/JSONEncoder.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.protocols.JSONEncoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/protocols/JSONMessageHandler.js": {
            "name": "../src/easynode/framework/server/tcp/protocols/JSONMessageHandler.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.protocols.JSONMessageHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/Decoder.js": {
            "name": "../src/easynode/framework/server/tcp/Decoder.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.Decoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/Encoder.js": {
            "name": "../src/easynode/framework/server/tcp/Encoder.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.Encoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/Message.js": {
            "name": "../src/easynode/framework/server/tcp/Message.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.Message": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/MessageHandler.js": {
            "name": "../src/easynode/framework/server/tcp/MessageHandler.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.MessageHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/StreamDecoderHelper.js": {
            "name": "../src/easynode/framework/server/tcp/StreamDecoderHelper.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.StreamDecoderHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/StreamEncoderHelper.js": {
            "name": "../src/easynode/framework/server/tcp/StreamEncoderHelper.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.StreamEncoderHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/TCPClient.js": {
            "name": "../src/easynode/framework/server/tcp/TCPClient.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.TCPClient": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/tcp/TCPServer.js": {
            "name": "../src/easynode/framework/server/tcp/TCPServer.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.tcp.TCPServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/AbstractServer.js": {
            "name": "../src/easynode/framework/server/AbstractServer.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.AbstractServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/server/ServerStat.js": {
            "name": "../src/easynode/framework/server/ServerStat.js",
            "modules": {},
            "classes": {
                "easynode.framework.server.ServerStat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/test/TestCase.js": {
            "name": "../src/easynode/framework/test/TestCase.js",
            "modules": {},
            "classes": {
                "easynode.framework.test.TestCase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/test/TestCaseRunner.js": {
            "name": "../src/easynode/framework/test/TestCaseRunner.js",
            "modules": {},
            "classes": {
                "easynode.framework.test.TestCaseRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/Binary.js": {
            "name": "../src/easynode/framework/util/Binary.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.Binary": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/FileService.js": {
            "name": "../src/easynode/framework/util/FileService.js",
            "modules": {},
            "classes": {
                "#NAMESPACE#.FileService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/HTTPUtil.js": {
            "name": "../src/easynode/framework/util/HTTPUtil.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.HTTPUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/MustacheHelper.js": {
            "name": "../src/easynode/framework/util/MustacheHelper.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.MustacheHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/MyError.js": {
            "name": "../src/easynode/framework/util/MyError.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.MyError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/MyError2.js": {
            "name": "../src/easynode/framework/util/MyError2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/ObjectWrapper.js": {
            "name": "../src/easynode/framework/util/ObjectWrapper.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.ObjectWrapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/SqlUtil.js": {
            "name": "../src/easynode/framework/util/SqlUtil.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.SqlUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/StringUtil.js": {
            "name": "../src/easynode/framework/util/StringUtil.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.StringUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/util/VersionComparator.js": {
            "name": "../src/easynode/framework/util/VersionComparator.js",
            "modules": {},
            "classes": {
                "easynode.framework.util.VersionComparator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/BeanFactory.js": {
            "name": "../src/easynode/framework/BeanFactory.js",
            "modules": {},
            "classes": {
                "easynode.framework.BeanFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/framework/Logger.js": {
            "name": "../src/easynode/framework/Logger.js",
            "modules": {},
            "classes": {
                "easynode.framework.Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easynode/GenericObject.js": {
            "name": "../src/easynode/GenericObject.js",
            "modules": {},
            "classes": {
                "easynode.GenericObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/EasyNode.js": {
            "name": "../src/EasyNode.js",
            "modules": {},
            "classes": {
                "EasyNode": 1,
                "全局函数": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "easynode.framework.aop.AOP": {
            "name": "easynode.framework.aop.AOP",
            "shortname": "easynode.framework.aop.AOP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/aop/AOP.js",
            "line": 8,
            "description": "Class AOP",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.ActionAOP.ActionAOP": {
            "name": "easynode.framework.ActionAOP.ActionAOP",
            "shortname": "easynode.framework.ActionAOP.ActionAOP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/aop/ActionAOP.js",
            "line": 10,
            "description": "Class ActionAOP",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.cache.CacheStat": {
            "name": "easynode.framework.cache.CacheStat",
            "shortname": "easynode.framework.cache.CacheStat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/cache/CacheStat.js",
            "line": 6,
            "description": "缓存服务统计实体类。",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.cache.ICache": {
            "name": "easynode.framework.cache.ICache",
            "shortname": "easynode.framework.cache.ICache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 6,
            "description": "缓存接口，定义了缓存的抽象函数。\n各缓存支持情况：\nmemcached - since 0.1.0\nredis - since 0.1.0",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.cache.Memcached": {
            "name": "easynode.framework.cache.Memcached",
            "shortname": "easynode.framework.cache.Memcached",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 14,
            "description": "Class Memcached, ICache实现类",
            "extends": "easynode.framework.cache.ICache",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.cache.Redis": {
            "name": "easynode.framework.cache.Redis",
            "shortname": "easynode.framework.cache.Redis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 9,
            "description": "Class Redis",
            "extends": "easynode.framework.cache.ICache",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.db.IConnection": {
            "name": "easynode.framework.db.IConnection",
            "shortname": "easynode.framework.db.IConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 6,
            "description": "数据库连接接口，定义了访问数据库的接口函数。包括执行SQL语句，开启事务，提交、回滚事务以及对Model的CRUDL操作。\n数据库支持情况：\n     mysql - since 0.1.0",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.db.IDataSource": {
            "name": "easynode.framework.db.IDataSource",
            "shortname": "easynode.framework.db.IDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 6,
            "description": "数据源接口，定义了数据源的初始化、销毁、获取连接，释放连接等抽象函数。\n实现类：easynode.framework.db.MysqlDataSource",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.db.MysqlConnection": {
            "name": "easynode.framework.db.MysqlConnection",
            "shortname": "easynode.framework.db.MysqlConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 16,
            "description": "Class MysqlConnection",
            "extends": "easynode.framework.db.IConnection",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.db.MysqlDataSource": {
            "name": "easynode.framework.db.MysqlDataSource",
            "shortname": "easynode.framework.db.MysqlDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/db/MysqlDataSource.js",
            "line": 9,
            "description": "Class MysqlDataSource",
            "extends": "easynode.framework.db.IDataSource",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mq.IQueue": {
            "name": "easynode.framework.mq.IQueue",
            "shortname": "easynode.framework.mq.IQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mq/IQueue.js",
            "line": 6,
            "description": "Class IQueue",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.queue.MQTTQueue": {
            "name": "easynode.framework.queue.MQTTQueue",
            "shortname": "easynode.framework.queue.MQTTQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 23,
            "description": "Class MQTTQueue",
            "extends": "easynode.framework.mq.IQueue",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mq.RedisListQueue": {
            "name": "easynode.framework.mq.RedisListQueue",
            "shortname": "easynode.framework.mq.RedisListQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mq/RedisListQueue.js",
            "line": 21,
            "description": "Class RedisListQueue",
            "extends": "easynode.framework.mq.IQueue",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mq.RedisQueue": {
            "name": "easynode.framework.mq.RedisQueue",
            "shortname": "easynode.framework.mq.RedisQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mq/RedisQueue.js",
            "line": 8,
            "description": "Class RedisQueue",
            "extends": "easynode.framework.mq.IQueue",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.spi.MysqlModelGenerator": {
            "name": "easynode.framework.mvc.spi.MysqlModelGenerator",
            "shortname": "easynode.framework.mvc.spi.MysqlModelGenerator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "line": 12,
            "description": "Class MysqlModelGenerator",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.Action": {
            "name": "easynode.framework.mvc.Action",
            "shortname": "easynode.framework.mvc.Action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 9,
            "description": "Action抽象类。定义了Action的一些抽象函数，子类需要实现这些抽象函数。Action的子类的构造器只能传递一个类型为ActionContext的参数。\n同时，Action的子类应具有module和name两个静态属性对应于添加到ActionFactory时的module和name.\n<h5>示例</h5>\n\n     //sample\n     var Action = using('easynode.framework.mvc.Action');\n     class MyAction extends Action {\n             constructor (ctx) {\n                     super(ctx);\n             }\n     }\n\n     // 访问：http://localhost:5000/rest/demoM/demoA\n     MyAction.module = 'demoM';\n     MyAction.action = 'demoA';\n\n     // 与如下语句相同。\n     Action.define('demoM', 'demoA', MyAction);",
            "extends": "easynode.GenericObject",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionArgConverter": {
            "name": "easynode.framework.mvc.ActionArgConverter",
            "shortname": "easynode.framework.mvc.ActionArgConverter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionArgConverter.js",
            "line": 6,
            "description": "Class ActionArgConverter",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionContext": {
            "name": "easynode.framework.mvc.ActionContext",
            "shortname": "easynode.framework.mvc.ActionContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 7,
            "description": "Class ActionContext",
            "extends": "easynode.GenericObject",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionExecutor": {
            "name": "easynode.framework.mvc.ActionExecutor",
            "shortname": "easynode.framework.mvc.ActionExecutor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionExecutor.js",
            "line": 12,
            "description": "Class ActionExecutor",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionFactory": {
            "name": "easynode.framework.mvc.ActionFactory",
            "shortname": "easynode.framework.mvc.ActionFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 14,
            "description": "Class ActionFactory",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionFilter": {
            "name": "easynode.framework.mvc.ActionFilter",
            "shortname": "easynode.framework.mvc.ActionFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionFilter.js",
            "line": 8,
            "description": "Class ActionFilter",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionRequestParameter": {
            "name": "easynode.framework.mvc.ActionRequestParameter",
            "shortname": "easynode.framework.mvc.ActionRequestParameter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 7,
            "description": "抽象类，定义了获取Action参数的函数 。",
            "extends": "easynode.GenericObject",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ActionResult": {
            "name": "easynode.framework.mvc.ActionResult",
            "shortname": "easynode.framework.mvc.ActionResult",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 7,
            "description": "Class ActionResult",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.CombinedAction": {
            "name": "easynode.framework.mvc.CombinedAction",
            "shortname": "easynode.framework.mvc.CombinedAction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/CombinedAction.js",
            "line": 8,
            "description": "Class CombinedAction，注意CombinedAction始终返回成功的ActionResult。",
            "extends": "easynode.framework.mvc.Action",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.EJSTemplateViewRenderer": {
            "name": "easynode.framework.mvc.EJSTemplateViewRenderer",
            "shortname": "easynode.framework.mvc.EJSTemplateViewRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/EJSTemplateViewRenderer.js",
            "line": 8,
            "description": "Class EJSTemplateViewRenderer，用于渲染EJS模板引擎的View",
            "extends": "easynode.framework.mvc.ITemplateViewRenderer",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.IActionContextListener": {
            "name": "easynode.framework.mvc.IActionContextListener",
            "shortname": "easynode.framework.mvc.IActionContextListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/IActionContextListener.js",
            "line": 6,
            "description": "Class IActionContextListener。流程顺序：onCreate->onActionReady->onDestroy，出错时调用onError->onDestroy",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ITemplateViewRenderer": {
            "name": "easynode.framework.mvc.ITemplateViewRenderer",
            "shortname": "easynode.framework.mvc.ITemplateViewRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ITemplateViewRenderer.js",
            "line": 6,
            "description": "Interface ITemplateViewRenderer",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.JSONView": {
            "name": "easynode.framework.mvc.JSONView",
            "shortname": "easynode.framework.mvc.JSONView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/JSONView.js",
            "line": 6,
            "description": "Class JSONView",
            "extends": "easynode.framework.mvc.View",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.JadeTemplateViewRenderer": {
            "name": "easynode.framework.mvc.JadeTemplateViewRenderer",
            "shortname": "easynode.framework.mvc.JadeTemplateViewRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/JadeTemplateViewRenderer.js",
            "line": 8,
            "description": "Class JadeTemplateViewRenderer，用于渲染Jade模板引擎的View",
            "extends": "easynode.framework.mvc.ITemplateViewRenderer",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.MethodDispatchedAction": {
            "name": "easynode.framework.mvc.MethodDispatchedAction",
            "shortname": "easynode.framework.mvc.MethodDispatchedAction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "line": 9,
            "description": "Class MethodDispatchedAction",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.Model": {
            "name": "easynode.framework.mvc.Model",
            "shortname": "easynode.framework.mvc.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 10,
            "description": "Class Model",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ModelField": {
            "name": "easynode.framework.mvc.ModelField",
            "shortname": "easynode.framework.mvc.ModelField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 16,
            "description": "Class ModelField",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.ModelProxyActionFactory": {
            "name": "easynode.framework.mvc.ModelProxyActionFactory",
            "shortname": "easynode.framework.mvc.ModelProxyActionFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 16,
            "description": "Class ModelProxyActionFactoryFactory。暴露模型的CRUDL函数为REST接口。",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.MustacheTemplateViewRenderer": {
            "name": "easynode.framework.mvc.MustacheTemplateViewRenderer",
            "shortname": "easynode.framework.mvc.MustacheTemplateViewRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/MustacheTemplateViewRenderer.js",
            "line": 8,
            "description": "Class MustacheTemplateViewRenderer，用于渲染Mustache模板引擎的View。在mustache模板中，内置支持以下格式转换函数：\n<h5>通过{{#fmt.*}}{{/fmt.*}}使用格式转换函数</h5>\n<pre>\n        fmt.fixedx   -       保留x位小数，x = 0(取整), 1, 2, 3, 4, 6\n        fmt.blank    -       值为null时输出空白字符而不是null字符串\n        fmt.dash     -       值为null或为空白字符时，输出-(横杠)\n        fmt.date     -        转成日期型, YYYY-MM-DD\n        fmt.datetime -       转成日期时间型, 精确到分，YYYY-MM-DD HH24:MI\n        fmt.datetimeS -      转成日期时间型，精确到秒，YYYY-MM-DD HH24:MI:SS\n        fmt.currency -       转成货币格式：123,456,789.00   保留两位小数\n        fmt.currency4 -      转成货币格式：123,456,789.0000 保留４位小数\n        fmt.blockSize -       数据块大小，自动根据大小换算单位(TB，GB, MB, KB)，保留１位小数。\n        fmt.state        -       转换状态码为状态文字，例：{{#fmt.state}}{{xxx.state}};0:失败;1:成功;{{/fmt.state}}\n        fmt.XSSless    -        去文字中的脚本，防止XSS注入\n        fmt.when       -        支持条件判断，例：{{#fmt.when}}{{var}}==1,xxxxxxxx{{/fmt.when}}，\n                                    支持的运算符：==、>=、<=、>、<、!=、=>(或，{{var}}=>1||2||3，表示var == 1或var == 2或var==3)\n</pre>",
            "extends": "easynode.framework.mvc.ITemplateViewRenderer",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.view.TemplateView": {
            "name": "easynode.framework.view.TemplateView",
            "shortname": "easynode.framework.view.TemplateView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/TemplateView.js",
            "line": 20,
            "description": "Class TemplateView",
            "extends": "easynode.framework.mvc.View",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.mvc.View": {
            "name": "easynode.framework.mvc.View",
            "shortname": "easynode.framework.mvc.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/mvc/View.js",
            "line": 6,
            "description": "Class View",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.plugin.EasyNodePlugin": {
            "name": "easynode.framework.plugin.EasyNodePlugin",
            "shortname": "easynode.framework.plugin.EasyNodePlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 19,
            "description": "Class EasyNodePlugin",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.plugin.PluginLoadContext": {
            "name": "easynode.framework.plugin.PluginLoadContext",
            "shortname": "easynode.framework.plugin.PluginLoadContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 7,
            "description": "插件加载环境类PluginLoadContext",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.http.KOAActionContext": {
            "name": "easynode.framework.server.http.KOAActionContext",
            "shortname": "easynode.framework.server.http.KOAActionContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 8,
            "description": "Class KOAActionContext",
            "extends": "easynode.ActionContext",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.http.KOADefaultRoutes": {
            "name": "easynode.framework.server.http.KOADefaultRoutes",
            "shortname": "easynode.framework.server.http.KOADefaultRoutes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 11,
            "description": "Class KOADefaultRoutes",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.http.KOAHttpRequestParameter": {
            "name": "easynode.framework.server.http.KOAHttpRequestParameter",
            "shortname": "easynode.framework.server.http.KOAHttpRequestParameter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 12,
            "description": "KOAHttpRequestParameter提供了标准的获取HTTP参数或上传的文件的函数供下游middleware使用。",
            "extends": "easynode.framework.mvc.ActionRequestParameter",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.http.KOAHttpServer": {
            "name": "easynode.framework.server.http.KOAHttpServer",
            "shortname": "easynode.framework.server.http.KOAHttpServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 62,
            "description": "KOAHttpServer封装了一个koa Application，预定义了access logger，csrf，session, routes等中间件，并支持通过API方式向koa Application\n增加新的中间件、路由。<br>\n中间件和路由的加载顺序：favicon->access log->static files(包括所有静态文件目录)->session->csrf->$middlewares->default routes->$extra routes->$middleware-after-routes\n<h5>使用参考：</h5>\n<pre>\n\n\n                        require('../src/EasyNode.js');\n                        EasyNode.addSourceDirectory('src');\n                        var co = require('co');\n                        var assert = require('assert');\n                        var logger = using('easynode.framework.Logger').getLogger();\n\n                        var KOAHttpServer = using('easynode.framework.server.http.KOAHttpServer');\n                        var server = new KOAHttpServer();\n\n                        // redis session存储\n                        //server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_REDIS, {\n                       //        host : '127.0.0.1',\n                       //        port : 6379\n                       //});\n\n                        // memcached session存储\n                        //server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMCACHED, {\n                       //        host : '127.0.0.1',\n                       //        port : 11211\n                       //});\n\n                        // memory session 存储\n                        server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMORY);\n\n                        //增加一个WEB目录。\n                        server.addWebDirs('plugins/demo/www/');\n\n                        //增加一个中间件\n                        server.addMiddleware(function * (next) {\n                       console.log('this message is printed anytime');\n                       console.log(this.parameter.param('a'));\n                       console.log(this.parameter.param('b'));\n                       console.log(this.parameter.dateParam('c'));\n                       console.log(this.remoteAddress);                        //客户端IP地址\n                               yield next;\n                       });\n\n                        //增加一个在路由之后的中间件\n                        server.addMiddlewareAfterRoutes(function * (next) {\n                       console.log('this message is printed when no route was found');\n                               this.type = 'json';\n                               this.body = {\n                                       hello : 'EasyNode'\n                               };\n                               yield next;\n                       });\n\n                        //增加一个路由\n                        server.addRoute('get', '/abc.jsp', function * () {\n                                this.body = 'This is abc.jsp';\n                       });\n\n                        //启动服务\n\n                        co(function * (){\n                               yield server.start();\n                       }).catch(onError());\n\n                        //错误处理\n                        function onError(err) {\n                               if(err) {\n                                       logger.error(err);\n                               }\n                       }\n </pre>",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.http.KOAHttpServer.SessionSupport": {
            "name": "easynode.framework.server.http.KOAHttpServer.SessionSupport",
            "shortname": "easynode.framework.server.http.KOAHttpServer.SessionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 984,
            "description": "session存储类型常量。\n<pre>\nKOAHttpServer.SessionSupport.STORAGE_MEMORY = 'storage-memory';\nKOAHttpServer.SessionSupport.STORAGE_REDIS = 'storage-redis';\nKOAHttpServer.SessionSupport.STORAGE_MEMCACHED = 'storage-memcached';\n</pre>\n<h5>Example</h5>\n<pre>\nvar KOAHttpServer = using('easynode.framework.server.http.KOAHttpServer');\nvar server = new KOAHttpServer();\n\n server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_REDIS, {\n   host : '127.0.0.1',\n   port : 6379\n });\n\n server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMCACHED, {\n   host : '127.0.0.1',\n   port : 11211\n });\n\n server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMORY);\n</pre>",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.KOAMemorySessionStorage": {
            "name": "easynode.framework.server.KOAMemorySessionStorage",
            "shortname": "easynode.framework.server.KOAMemorySessionStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "line": 6,
            "description": "KOAHttpServer session的内存存储，注意，内存存储仅供开发使用，并且不支持TTL，线上产品请使用redis或后续将支持的memcached等 。",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.protocols.JSONDecoder": {
            "name": "easynode.framework.server.tcp.protocols.JSONDecoder",
            "shortname": "easynode.framework.server.tcp.protocols.JSONDecoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/protocols/JSONDecoder.js",
            "line": 7,
            "description": "Class JSONDecoder",
            "extends": "easynode.framework.server.tcp.Decoder",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.protocols.JSONEncoder": {
            "name": "easynode.framework.server.tcp.protocols.JSONEncoder",
            "shortname": "easynode.framework.server.tcp.protocols.JSONEncoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/protocols/JSONEncoder.js",
            "line": 6,
            "description": "Class JSONEncoder",
            "extends": "easynode.easynode.framework.server.tcp.Encoder",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.protocols.JSONMessageHandler": {
            "name": "easynode.framework.server.tcp.protocols.JSONMessageHandler",
            "shortname": "easynode.framework.server.tcp.protocols.JSONMessageHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/protocols/JSONMessageHandler.js",
            "line": 6,
            "description": "Class JSONMessageHandler",
            "extends": "easynode.framework.server.tcp.MessageHandler",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.Decoder": {
            "name": "easynode.framework.server.tcp.Decoder",
            "shortname": "easynode.framework.server.tcp.Decoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/Decoder.js",
            "line": 6,
            "description": "Class Decoder",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.Encoder": {
            "name": "easynode.framework.server.tcp.Encoder",
            "shortname": "easynode.framework.server.tcp.Encoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/Encoder.js",
            "line": 6,
            "description": "Class Encoder",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.Message": {
            "name": "easynode.framework.server.tcp.Message",
            "shortname": "easynode.framework.server.tcp.Message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/Message.js",
            "line": 7,
            "description": "Class Message",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.MessageHandler": {
            "name": "easynode.framework.server.tcp.MessageHandler",
            "shortname": "easynode.framework.server.tcp.MessageHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/MessageHandler.js",
            "line": 6,
            "description": "Class MessageHandler",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.StreamDecoderHelper": {
            "name": "easynode.framework.server.tcp.StreamDecoderHelper",
            "shortname": "easynode.framework.server.tcp.StreamDecoderHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/StreamDecoderHelper.js",
            "line": 8,
            "description": "Class StreamDecoderHelper",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.StreamEncoderHelper": {
            "name": "easynode.framework.server.tcp.StreamEncoderHelper",
            "shortname": "easynode.framework.server.tcp.StreamEncoderHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/StreamEncoderHelper.js",
            "line": 9,
            "description": "Class StreamEncoderHelper",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.TCPClient": {
            "name": "easynode.framework.server.tcp.TCPClient",
            "shortname": "easynode.framework.server.tcp.TCPClient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 6,
            "description": "Class TCPClient",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.tcp.TCPServer": {
            "name": "easynode.framework.server.tcp.TCPServer",
            "shortname": "easynode.framework.server.tcp.TCPServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 14,
            "description": "Class TCPServer",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.AbstractServer": {
            "name": "easynode.framework.server.AbstractServer",
            "shortname": "easynode.framework.server.AbstractServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 6,
            "description": "抽象服务类，请不要直接实例化该类，因为它的主要函数都是抽象函数。",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.server.ServerStat": {
            "name": "easynode.framework.server.ServerStat",
            "shortname": "easynode.framework.server.ServerStat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 5,
            "description": "服务状态统计实体类。",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.test.TestCase": {
            "name": "easynode.framework.test.TestCase",
            "shortname": "easynode.framework.test.TestCase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/test/TestCase.js",
            "line": 6,
            "description": "Class TestCase",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.test.TestCaseRunner": {
            "name": "easynode.framework.test.TestCaseRunner",
            "shortname": "easynode.framework.test.TestCaseRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/test/TestCaseRunner.js",
            "line": 7,
            "description": "Class TestCaseRunner",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.Binary": {
            "name": "easynode.framework.util.Binary",
            "shortname": "easynode.framework.util.Binary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 6,
            "description": "Class Binary",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "#NAMESPACE#.FileService": {
            "name": "#NAMESPACE#.FileService",
            "shortname": "#NAMESPACE#.FileService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 8,
            "description": "Class FileService",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "allen.hu"
        },
        "easynode.framework.util.HTTPUtil": {
            "name": "easynode.framework.util.HTTPUtil",
            "shortname": "easynode.framework.util.HTTPUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/HTTPUtil.js",
            "line": 11,
            "description": "Class HTTPUtil",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.MustacheHelper": {
            "name": "easynode.framework.util.MustacheHelper",
            "shortname": "easynode.framework.util.MustacheHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/MustacheHelper.js",
            "line": 8,
            "description": "Class MustacheHelper",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.MyError": {
            "name": "easynode.framework.util.MyError",
            "shortname": "easynode.framework.util.MyError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/MyError.js",
            "line": 6,
            "description": "Class MyError",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "allen.hu"
        },
        "easynode.framework.util.ObjectWrapper": {
            "name": "easynode.framework.util.ObjectWrapper",
            "shortname": "easynode.framework.util.ObjectWrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/ObjectWrapper.js",
            "line": 9,
            "description": "Class ObjectWrapper",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.SqlUtil": {
            "name": "easynode.framework.util.SqlUtil",
            "shortname": "easynode.framework.util.SqlUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 9,
            "description": "Class SqlUtil",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.StringUtil": {
            "name": "easynode.framework.util.StringUtil",
            "shortname": "easynode.framework.util.StringUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 9,
            "description": "Class StringUtil",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.util.VersionComparator": {
            "name": "easynode.framework.util.VersionComparator",
            "shortname": "easynode.framework.util.VersionComparator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/util/VersionComparator.js",
            "line": 6,
            "description": "Class VersionComparator",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.BeanFactory": {
            "name": "easynode.framework.BeanFactory",
            "shortname": "easynode.framework.BeanFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/BeanFactory.js",
            "line": 16,
            "description": "Class BeanFactory",
            "extends": "easynode.GenericObject",
            "since": "0.1.0",
            "author": "zlbbq"
        },
        "easynode.framework.Logger": {
            "name": "easynode.framework.Logger",
            "shortname": "easynode.framework.Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/framework/Logger.js",
            "line": 8,
            "description": "EasyNode日志类。这是一个单例类，请使用它的静态函数，不要实例化它。<br>\nLogger是结合配置文件定义的appender和log level使用的，参考：etc/EasyNode.conf。<br>\n<h5>示例</h5>\n<pre>\n var logger = using('easynode.framework.Logger').forFile(__filename);\n EasyNode.DEBUG && logger.debug('Hello, EasyNode');\n logger.info('Hello, EasyNode');\n logger.warn('Hello, EasyNode');\n logger.error('Hello, EasyNode');\n logger.fatal('Hello, EasyNode');\n </pre>",
            "extends": "easynode.GenericObject",
            "author": "zlbbq",
            "since": "0.1.0"
        },
        "easynode.GenericObject": {
            "name": "easynode.GenericObject",
            "shortname": "easynode.GenericObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/easynode/GenericObject.js",
            "line": 5,
            "description": "GenericObject类。所有的EasyNode类均继承自此类。<br>\nGenericObject类继承自Node.js->events.EventEmitter，所有的GenericObject类实例，或其子例实例均可以使用\non, once, emit, removeListener函数触发和监听事件。<br>\n<h5>util.inherits(GenericObject, events.EventEmitter);</h5>\n<pre>\nvar GenericObject = using('easynode.GenericObject');\nclass MyClass extends GenericObject {\n     constructor () {\n             super();\n     }\n}\n\nvar o = new MyClass();\no.on('hello', function() {\n     console.log('Hello, EasyNode');\n});\no.trigger('hello');\n</pre>",
            "author": "zlbbq",
            "since": "0.1.0"
        },
        "EasyNode": {
            "name": "EasyNode",
            "shortname": "EasyNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/EasyNode.js",
            "line": 10,
            "description": "为简化API调用定义必要的全局函数，使用全局函数需要引入EasyNode.js，请在应用程序第一行引入EasyNode.js。<br>\n     <h5>示例</h5>\n     //bin/main.js。第一行<br>\n     require('../src/EasyNode.js');<br>\n     EasyNode.addSourceDirectory('test', 'demo','app');<br>\n     EasyNode.addConfigFile('app.conf');<br>\n     var Logger = using('easynode.framework.Logger');<br>\n     Logger.getLogger().info('Hello, EasyNode');<br>"
        },
        "全局函数": {
            "name": "全局函数",
            "shortname": "全局函数",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/EasyNode.js",
            "line": 684,
            "description": "全局函数"
        }
    },
    "classitems": [
        {
            "file": "../src/easynode/framework/aop/AOP.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.aop.AOP"
        },
        {
            "file": "../src/easynode/framework/aop/AOP.js",
            "line": 29,
            "description": "AOP before。功能：在A函数执行前先行执行B函数，使用B函数的返回值（必须是一个数组）作为A函数的参数。A函数：被拦截函数，\nB函数：拦截函数。",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "namespace",
                    "description": "全类名或对象或类",
                    "type": "String/Object/Class"
                },
                {
                    "name": "methodName",
                    "description": "要拦截的函数名（被拦截函数）",
                    "type": "String"
                },
                {
                    "name": "fnBefore",
                    "description": "拦截函数，此函数可以是普通函数或generator函数，取决于syncMode，如果是AOP.SYNC则为同步函数\n　　　　　　　　　　　　　　 如果是AOP.ASYNC则为一个generator函数(异步函数)。为了避免generator中的this指针引用问题，建议使用一个返回\n                                                     generator的高阶函数替代纯generator函数。\n                                                     拦截函数的参数与被拦截函数的参数相同",
                    "type": "Function/generator"
                },
                {
                    "name": "syncMode",
                    "description": "\"sync/async\"，AOP.SYNC/AOP.ASYNC，表示被拦截的函数的类型，ASYNC表示拦截的函数是一个generator函数\n                                                     注意：拦截函数的类型(sync/async)必须与被拦截函数的类型一致",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回一个数组，该数组中的元素依次作为被拦截函数的参数传入(Function.apply)。如果不需要修改参数，可以return arguments;",
                "type": "Array"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n             var obj = {\n                     name : 'ABC',\n                     sayHello : function(hello) {\n                             console.log(this.name + '->' + hello);\n                             this.name = 'abc';\n                     }\n             };\n\n             AOP.before(obj, 'sayHello', function(){\n                     console.log('Before->' + this.name);\n                     return ['PPP'];                                                        //实际传递到obj.sayHello的函数的参数hello变成了\"PPP\"\n             });"
            ],
            "class": "easynode.framework.aop.AOP"
        },
        {
            "file": "../src/easynode/framework/aop/AOP.js",
            "line": 110,
            "description": "AOP after。功能：在A函数执行后执行B函数，A函数的返回值作为B函数的传入参数，B函数的返回值作为A函数的最终返回值。A函数：被拦截函数，\nB函数：拦截函数。",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "namespace",
                    "description": "全类名或对象或类",
                    "type": "String/Object/Class"
                },
                {
                    "name": "methodName",
                    "description": "要拦截的函数名（被拦截函数）",
                    "type": "String"
                },
                {
                    "name": "fnAfter",
                    "description": "拦截函数，此函数可以是普通函数或generator函数，取决于syncMode，如果是AOP.SYNC则为同步函数\n　　　　　　　　　　　　　　 如果是AOP.ASYNC则为一个generator函数(异步函数)。为了避免generator中的this指针引用问题，建议使用一个返回\n                                                     generator的高阶函数替代纯generator函数。\n                                                     拦截函数的参数与被拦截函数的参数相同",
                    "type": "Function/generator"
                },
                {
                    "name": "syncMode",
                    "description": "\"sync/async\"，AOP.SYNC/AOP.ASYNC，表示被拦截的函数的类型，ASYNC表示拦截的函数是一个generator函数\n                                                     注意：拦截函数的类型(sync/async)必须与被拦截函数的类型一致",
                    "type": "String"
                }
            ],
            "return": {
                "description": "该返回值将作为被拦截函数的实际返回值",
                "type": "Any"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n             var obj = {\n                     name : 'ABC',\n                     sayHello : function(hello) {\n                             console.log(this.name + '->' + hello);\n                             this.name = 'abc';\n                     }\n             };\n\n             AOP.after(obj, 'sayHello', function(ret){\n                     console.log('After->' + this.name);\n             });"
            ],
            "class": "easynode.framework.aop.AOP"
        },
        {
            "file": "../src/easynode/framework/aop/AOP.js",
            "line": 194,
            "description": "从JSON文件描述中初始化AOP模块。",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "",
                    "description": "拦截器描述文件（多参），描述对象Notation:\n                                                                             {\n                                                                                      \"target\" : \"easynode.framework.util.SqlUtil\",\n                                                                                      \"interceptor\" : \"easynode.tests.SqlUtilInterceptor\",\n                                                                                      \"method\" : \"replaceMysqlArgs\",\n                                                                                      \"mode\" : \"sync\",\n                                                                                      \"when\" : \"before\"\n                                                                              }",
                    "type": "String",
                    "multiple": true
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.aop.AOP"
        },
        {
            "file": "../src/easynode/framework/aop/ActionAOP.js",
            "line": 19,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.ActionAOP.ActionAOP"
        },
        {
            "file": "../src/easynode/framework/aop/ActionAOP.js",
            "line": 31,
            "description": "清除Action AOP。",
            "itemtype": "method",
            "name": "actionAOPClear",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.ActionAOP.ActionAOP"
        },
        {
            "file": "../src/easynode/framework/aop/ActionAOP.js",
            "line": 46,
            "description": "设置Action AOP。",
            "itemtype": "method",
            "name": "actionAOPSet",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "before",
                    "description": "process前置处理函数，function * (ctx, ...args) {} 与Action的process函数同参",
                    "type": "Generator"
                },
                {
                    "name": "after",
                    "description": "process后置处理函数，function * (ctx, actionResult) {}",
                    "type": "After"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.ActionAOP.ActionAOP"
        },
        {
            "file": "../src/easynode/framework/aop/ActionAOP.js",
            "line": 83,
            "description": "执行Action，支持AOP。",
            "itemtype": "method",
            "name": "actionAOPExec",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "Action实例",
                    "type": "Action"
                },
                {
                    "name": "stack",
                    "description": "Action的process函数参数栈",
                    "type": "Array"
                }
            ],
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.ActionAOP.ActionAOP"
        },
        {
            "file": "../src/easynode/framework/cache/CacheStat.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.CacheStat"
        },
        {
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 18,
            "description": "取值。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存的值",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.ICache"
        },
        {
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 33,
            "description": "缓存值。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "值",
                    "type": "Object"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.ICache"
        },
        {
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 48,
            "description": "重新设置缓存时间。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.ICache"
        },
        {
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 62,
            "description": "从缓存中删除值。",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.ICache"
        },
        {
            "file": "../src/easynode/framework/cache/ICache.js",
            "line": 75,
            "description": "缓存情况统计。",
            "itemtype": "method",
            "name": "stat",
            "return": {
                "description": "缓存实体",
                "type": "easynode.framework.cache.CacheStat"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.ICache"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 23,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "connect",
                    "description": "参考memcached模块的构造参数。默认值：127.0.0.1:11211\n     var memcached = new Memcached({ '192.168.0.102:11211': 1, '192.168.0.103:11211': 2, '192.168.0.104:11211': 1 });\n     var memcached = new Memcached([ '192.168.0.102:11211', '192.168.0.103:11211', '192.168.0.104:11211' ]);\n     var memcached = new Memcached('192.168.0.102:11211');",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "连接参数，参考：<a href='https://www.npmjs.com/package/memcached' target='_blank'>memcached模块初始化参数</a>",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 45,
            "description": "取值。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存的值",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 72,
            "description": "缓存值。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "值",
                    "type": "Object"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 95,
            "description": "重新设置缓存时间。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 116,
            "description": "从缓存中删除值。",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Memcached.js",
            "line": 136,
            "description": "缓存情况统计。功能暂不可用。",
            "itemtype": "method",
            "name": "stat",
            "return": {
                "description": "缓存实体",
                "type": "easynode.framework.cache.CacheStat"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Memcached"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "server",
                    "description": "redis服务器, 默认127.0.0.1",
                    "type": "String"
                },
                {
                    "name": "port",
                    "description": "redis服务端口，默认6379",
                    "type": "Int"
                },
                {
                    "name": "opts",
                    "description": "redis连接选项，默认{},\n             请参考：<a href='https://www.npmjs.com/package/redis' target='_blank'>redis模块初始化参数</a>",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 34,
            "description": "初始化连接参数。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存的值",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 64,
            "description": "取值。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存的值",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 93,
            "description": "缓存值。如果不设置TTL并且原KEY有TTL，则保证该KEY在原TTL到期时被删除。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "值",
                    "type": "Object"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 131,
            "description": "重新设置缓存时间。注意：如果已经KEY已经过期，则该函数没有任何效果。",
            "itemtype": "method",
            "name": "touch",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                },
                {
                    "name": "ttl",
                    "description": "缓存时间，单位，秒",
                    "type": "Int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 155,
            "description": "从缓存中删除值。",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/cache/Redis.js",
            "line": 181,
            "description": "缓存情况统计。",
            "itemtype": "method",
            "name": "stat",
            "return": {
                "description": "缓存实体",
                "type": "easynode.framework.cache.CacheStat"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.cache.Redis"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 17,
            "description": "执行查询SQL，返回查询结果数组",
            "itemtype": "method",
            "name": "execQuery",
            "params": [
                {
                    "name": "sql",
                    "description": "查询SQL模板语句。SELECT A.* FROM TABLE_A WHERE A.FIELD_A = #fieldA# AND A.FIELD_B = $fieldB$\n                     \"#\"表示转义参数，通常用于字符串、日期等数据类型\n                     \"$\"表示非转义参数，通常用于数值型或SQL子句，注意SQL注入风险。",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "模板替换参数，如果是对象，则按同名替换，如果是数组则逐个按顺序替换",
                    "type": "Object/Array"
                }
            ],
            "return": {
                "description": "查询结果，每个元素表示为一个JSON对象，具有与查询结果集列名完全同名的属性。",
                "type": "Array"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 34,
            "description": "执行更新SQL，返回影响行数",
            "itemtype": "method",
            "name": "execUpdate",
            "params": [
                {
                    "name": "sql",
                    "description": "查询SQL模板语句。SELECT A.* FROM TABLE_A WHERE A.FIELD_A = #fieldA# AND A.FIELD_B = $fieldB$\n                     \"#\"表示转义参数，通常用于字符串、日期等数据类型\n                     \"$\"表示非转义参数，通常用于数值型或SQL子句，注意SQL注入风险。",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "模板替换参数，如果是对象，则按同名替换，如果是数组则逐个按顺序替换",
                    "type": "Object/Array"
                }
            ],
            "return": {
                "description": "返回更新语句影响行数和insertId，insertId表示自增列ID\n                             {\n                                     rowsAffected : 1,                       //更新影响行数\n                                     insertId : 0                                 //自增列ID\n                             }",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 55,
            "description": "启动事务",
            "itemtype": "method",
            "name": "beginTransaction",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 67,
            "description": "提交事务",
            "itemtype": "method",
            "name": "commit",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 79,
            "description": "回滚事务",
            "itemtype": "method",
            "name": "rollback",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 91,
            "description": "创建一个数据库模型。",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "model",
                    "description": "模型及值定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 104,
            "description": "从数据库读取一个模型。",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 116,
            "description": "更新数据库的一个模型。",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 129,
            "description": "从数据库删除一个或一组模型。",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                },
                {
                    "name": "ids",
                    "description": "主键值数组或单个数值。数组时删除多个，单个数值时仅删除一个",
                    "type": "Array/int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IConnection.js",
            "line": 143,
            "description": "从数据库查询模型集合。",
            "itemtype": "method",
            "name": "list",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                },
                {
                    "name": "condition",
                    "description": "查询条件，属性名应与查询字段相同，属性值的Notation表示如下：\n                     {\n                             exp : '=',                                                         //查询条件表达式:\n                                                                                                    // =, <>, !=, >, < , >= , <= : value可为任意类型\n                                                                                                    // like, startsWith, endsWith : value需要是字符串类型\n                                                                                                    // in, not-in : value需要为一个数组\n                                                                                                    // between : value需要为一个两个元素的数组\\\n                             value : 'any type matched to the field'\n                     }\n                     当condition为String时，默认为：{condition : '=', value : '$string value'}",
                    "type": "Object/String"
                },
                {
                    "name": "pagination",
                    "description": "分页参数, Notation : { page : 1, rpp : 20} page: 页号，rpp : 每页行数(rows per page)",
                    "type": "Object"
                },
                {
                    "name": "orderBy",
                    "description": "排序方式，字符串数组，\n                             格式：[$fieldName ASC/DESC, $fieldName ASC/DESC]，使用空格来分隔排序字段和条件",
                    "type": "Array"
                },
                {
                    "name": "conditionPattern",
                    "description": "查询条件拼装模板, 为空时则默认按所传递条件的AND条件拼装，如果传递此值，\n                             必须以'AND '开头，使用'$'前后包裹字段名表示条件子句占位符，例：'AND ($pluginName$ OR $pluginVersion$) AND $jsonTest$'\n                             实际执行的SQL将替换各占位符为条件子句，如果条件子句没有传递，则条件子句为\"1 = 1\"，这会显得SQL\n                             比较啰嗦，但是会减少非常大的子符串操作工作量并且具有相当好的容错性，同时这会不给数据库带来\n                             过多的额外开销，因为数据库会在SQL解析时忽略这条条件子句。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "分页查询结果, Notation : { rows, pages, page, rpp, data : [] } rows : 结果集总行数，pages : 结果集总页数, page, rpp同参数pagination",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IConnection"
        },
        {
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 16,
            "description": "获取数据源名称",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "数据源名称",
                "type": "String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IDataSource"
        },
        {
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 29,
            "description": "初始化数据源",
            "itemtype": "method",
            "name": "initialize",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IDataSource"
        },
        {
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 41,
            "description": "销毁数据源",
            "itemtype": "method",
            "name": "destroy",
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IDataSource"
        },
        {
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 55,
            "description": "从数据源中获取一个连接，通常数据源是一个数据库连接池",
            "itemtype": "method",
            "name": "getConnection",
            "return": {
                "description": "数据源连接实例",
                "type": "easynode.framework.db.IConnection"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IDataSource"
        },
        {
            "file": "../src/easynode/framework/db/IDataSource.js",
            "line": 69,
            "description": "释放一个连接。",
            "itemtype": "method",
            "name": "releaseConnection",
            "params": [
                {
                    "name": "数据源连接实例，从getConnection取得。",
                    "description": "",
                    "type": "easynode.framework.db.IConnection"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.IDataSource"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 25,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 38,
            "description": "执行查询SQL，返回查询结果数组",
            "itemtype": "method",
            "name": "execQuery",
            "params": [
                {
                    "name": "sql",
                    "description": "查询SQL模板语句。SELECT A.* FROM TABLE_A WHERE A.FIELD_A = #fieldA# AND A.FIELD_B = $fieldB$\n                     \"#\"表示转义参数，通常用于字符串、日期等数据类型\n                     \"$\"表示非转义参数，通常用于数值型或SQL子句，注意SQL注入风险。",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "模板替换参数，如果是对象，则按同名替换，如果是数组则逐个按顺序替换",
                    "type": "Object/Array"
                }
            ],
            "return": {
                "description": "查询结果，每个元素表示为一个JSON对象，具有与查询结果集列名完全同名的属性。",
                "type": "Array"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 74,
            "description": "执行更新SQL，返回影响行数",
            "itemtype": "method",
            "name": "execUpdate",
            "params": [
                {
                    "name": "sql",
                    "description": "查询SQL模板语句。SELECT A.* FROM TABLE_A WHERE A.FIELD_A = #fieldA# AND A.FIELD_B = $fieldB$\n                     \"#\"表示转义参数，通常用于字符串、日期等数据类型\n                     \"$\"表示非转义参数，通常用于数值型或SQL子句，注意SQL注入风险。",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "模板替换参数，如果是对象，则按同名替换，如果是数组则逐个按顺序替换",
                    "type": "Object/Array"
                }
            ],
            "return": {
                "description": "返回更新语句影响行数和insertId，insertId表示自增列ID\n                             {\n                                     rowsAffected : 1,                       //更新影响行数\n                                     insertId : 0                                 //自增列ID\n                             }",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 113,
            "description": "启动事务",
            "itemtype": "method",
            "name": "beginTransaction",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 130,
            "description": "提交事务",
            "itemtype": "method",
            "name": "commit",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 147,
            "description": "回滚事务",
            "itemtype": "method",
            "name": "rollback",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 164,
            "description": "创建一个数据库模型。",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "model",
                    "description": "模型及值定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 198,
            "description": "从数据库读取一个模型。",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 235,
            "description": "更新数据库的一个模型。",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 270,
            "description": "从数据库删除一个或一组模型。",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                },
                {
                    "name": "ids",
                    "description": "主键值数组或单个数值。数组时删除多个，单个数值时仅删除一个",
                    "type": "Array/int"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlConnection.js",
            "line": 307,
            "description": "从数据库查询模型集合。",
            "itemtype": "method",
            "name": "list",
            "params": [
                {
                    "name": "model",
                    "description": "模型定义",
                    "type": "easynode.framework.mvc.Model"
                },
                {
                    "name": "condition",
                    "description": "查询条件，属性名应与查询字段相同，属性值的Notation表示如下：\n                     {\n                             exp : '=',                                                         //查询条件表达式:\n                                                                                                    // =, <>, !=, >, < , >= , <= : value可为任意类型\n                                                                                                    // like, startsWith, endsWith : value需要是字符串类型\n                                                                                                    // in, not-in : value需要为一个数组\n                                                                                                    // between : value需要为一个两个元素的数组\\\n                             value : 'any type matched to the field'\n                     }\n                     当condition为String时，默认为：{condition : '=', value : '$string value'}",
                    "type": "Object/String"
                },
                {
                    "name": "pagination",
                    "description": "分页参数, Notation : { page : 1, rpp : 20} page: 页号，rpp : 每页行数(rows per page)",
                    "type": "Object"
                },
                {
                    "name": "orderBy",
                    "description": "排序方式，字符串数组，\n                             格式：[$fieldName ASC/DESC, $fieldName ASC/DESC]，使用空格来分隔排序字段和条件",
                    "type": "Array"
                },
                {
                    "name": "conditionPattern",
                    "description": "查询条件拼装模板, 为空时则默认按所传递条件的AND条件拼装，如果传递此值，\n                             必须以'AND '开头，使用'$'前后包裹字段名表示条件子句占位符，例：'AND ($pluginName$ OR $pluginVersion$) AND $jsonTest$'\n                             实际执行的SQL将替换各占位符为条件子句，如果条件子句没有传递，则条件子句为\"1 = 1\"，这会显得SQL\n                             比较啰嗦，但是会减少非常大的子符串操作工作量并且具有相当好的容错性，同时这会不给数据库带来\n                             过多的额外开销。\n                             当conditionPattern为function时，使用该函数的返回值作为conditionPattern, 函数原型：function conditionPattern(condition, model){}",
                    "type": "String/Function"
                }
            ],
            "return": {
                "description": "分页查询结果, Notation : { rows, pages, page, rpp, data : [] } rows : 结果集总行数，pages : 结果集总页数, page, rpp同参数pagination",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlConnection"
        },
        {
            "file": "../src/easynode/framework/db/MysqlDataSource.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "opts",
                    "description": "Mysql连接池配置，对象原型：\n                     {\n                             host : '127.0.0.1',\n                             port : 3306',\n                             user : 'root',\n                             password : 'password of root',\n                             database : 'db,\n                             acquireTimeout : 10000,\n                             waitForConnections : true,        // true等待, false立即返回错误\n                             connectionLimit :  10,\n                             queueLimit : 10000\n                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.db.MysqlDataSource"
        },
        {
            "file": "../src/easynode/framework/mq/IQueue.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.IQueue"
        },
        {
            "file": "../src/easynode/framework/mq/IQueue.js",
            "line": 27,
            "description": "向队列发送消息。",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "发送选项，取决于队列的协议和驱动程序",
                    "type": "Object"
                },
                {
                    "name": "msgs",
                    "description": "JSON对象，可一次发送多条消息",
                    "type": "Object"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.IQueue"
        },
        {
            "file": "../src/easynode/framework/mq/IQueue.js",
            "line": 43,
            "description": "订阅队列消息。",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "订阅选项，取决于队列的协议和驱动程序",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "队列监听器，具有一个onMessage函数，函数原型：onMessage (msg) {}，msg类型：object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "订阅实例，需要通过unsubscribe释放资源",
                "type": "Object"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.IQueue"
        },
        {
            "file": "../src/easynode/framework/mq/IQueue.js",
            "line": 60,
            "description": "取消订阅队列消息。",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscribeInst",
                    "description": "subscribe函数的返回值",
                    "type": "Object"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.IQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 32,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 44,
            "description": "初始化连接参数。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "MQTT协议连接字符串：mqtt://127.0.0.1",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "默认mqtt",
                    "type": "String"
                },
                {
                    "name": "poolOpts",
                    "description": "连接池参数",
                    "type": "Object"
                },
                {
                    "name": "connectOpts",
                    "description": "连接参数",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 96,
            "description": "向队列发送消息。",
            "itemtype": "method",
            "name": "getDefaultOpts",
            "return": {
                "description": "返回默认队列选项",
                "type": "Object"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 110,
            "description": "向队列发送消息。",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "发送选项，取决于队列的协议和驱动程序",
                    "type": "Object"
                },
                {
                    "name": "msgs",
                    "description": "JSON对象，可一次发送多条消息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "消息发送结果",
                "type": "Boolean"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 154,
            "description": "订阅队列消息。",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "订阅选项，接受一个选项qos",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "队列监听器，具有一个onMessage和onError函数，\n                                             函数原型：onMessage (queueName, msg) {}，queueName类型：string，msg类型：object，\n                                                                onError(err) {},  err : 错误实例",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "订阅实例，需要通过unsubscribe释放资源, 如果返回null则表示订阅失败",
                "type": "Object"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 208,
            "description": "取消订阅队列消息。",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscribeInst",
                    "description": "subscribe函数的返回值",
                    "type": "Object"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 231,
            "description": "服务质量 - 一般服务。消息最多被传递一次，比如一般类广告，通知，不保证消息一定能到达。",
            "itemtype": "property",
            "name": "MQTTQueue.QoS_NORMAL",
            "type": "number",
            "default": "0",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 243,
            "description": "服务质量 - 保证消息到达，但可能重复。应用场景示例：账户余额通知",
            "itemtype": "property",
            "name": "MQTTQueue.QoS_GUARANTEE",
            "type": "number",
            "default": "0",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/MQTTQueue.js",
            "line": 255,
            "description": "服务质量 - 保证消息到达并且保证消息的一次到达。应用场景示例：消费通知",
            "itemtype": "property",
            "name": "MQTTQueue.QoS_GUARANTEE_ONCE",
            "type": "number",
            "default": "0",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.queue.MQTTQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisListQueue.js",
            "line": 30,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisListQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisListQueue.js",
            "line": 62,
            "description": "向队列发送消息。",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "发送选项，取决于队列的协议和驱动程序",
                    "type": "Object"
                },
                {
                    "name": "msgs",
                    "description": "JSON对象，可一次发送多条消息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "消息发送结果",
                "type": "Boolean"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisListQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisListQueue.js",
            "line": 92,
            "description": "订阅队列消息。注意，listener的onMessage是一个generator函数。",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "订阅选项，接受一个选项qos。FIFO : true, 先进先出队列, FILO : true，后进先出队列",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "队列监听器，具有一个onMessage和onError函数，l.pause指定是否接受数据如pause === true，则暂停接收队列数据，监听器会每隔１秒收到一条null消息\n                                             函数原型：onMessage * (queueName, msg) {}，queueName类型：string，msg类型：object，\n                                                                onError(err) {},  err : 错误实例",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "订阅实例，需要通过unsubscribe释放资源, 如果返回null则表示订阅失败",
                "type": "Object"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisListQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisListQueue.js",
            "line": 155,
            "description": "取消订阅队列消息。",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscribeInst",
                    "description": "subscribe函数的返回值",
                    "type": "Object"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisListQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisQueue.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisQueue.js",
            "line": 48,
            "description": "向队列发送消息。",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "发送选项，取决于队列的协议和驱动程序",
                    "type": "Object"
                },
                {
                    "name": "msgs",
                    "description": "JSON对象，可一次发送多条消息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "消息发送结果",
                "type": "Boolean"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisQueue.js",
            "line": 78,
            "description": "订阅队列消息。",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "queueName",
                    "description": "队列名称",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "订阅选项，接受一个选项qos",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "队列监听器，具有一个onMessage和onError函数，\n                                             函数原型：onMessage (queueName, msg) {}，queueName类型：string，msg类型：object，\n                                                                onError(err) {},  err : 错误实例",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "订阅实例，需要通过unsubscribe释放资源, 如果返回null则表示订阅失败",
                "type": "Object"
            },
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisQueue"
        },
        {
            "file": "../src/easynode/framework/mq/RedisQueue.js",
            "line": 114,
            "description": "取消订阅队列消息。",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscribeInst",
                    "description": "subscribe函数的返回值",
                    "type": "Object"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mq.RedisQueue"
        },
        {
            "file": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "line": 21,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.spi.MysqlModelGenerator"
        },
        {
            "file": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "line": 67,
            "description": "初始化Mysql模型工厂，从INFORMATION_SCHEMA表查询数据库表和视图的Metadata。数据源的连接必须具有查询INFORMATION_SCHEMA的权限。",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "mysqlDataSource",
                    "description": "Mysql数据源",
                    "type": "easynode.framework.db.MysqlDataSource"
                },
                {
                    "name": "schema",
                    "description": "数据库名",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "模型数组。model的Notation: {name : '', table : '', view : ''} 其中table必须，其他两个属性默认赞同于table属性。",
                    "type": "Array"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.spi.MysqlModelGenerator"
        },
        {
            "file": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "line": 125,
            "description": "从Mysql模型工厂中获取一个生成的模型。",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "name",
                    "description": "模型名称。",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.spi.MysqlModelGenerator"
        },
        {
            "file": "../src/easynode/framework/mvc/spi/MysqlModelGenerator.js",
            "line": 147,
            "description": "从Mysql模型工厂中获取一个生成的模型，并生成Model类。",
            "itemtype": "method",
            "name": "persistent",
            "params": [
                {
                    "name": "name",
                    "description": "模型名称。",
                    "type": "String"
                },
                {
                    "name": "relativePath",
                    "description": "模型存储相对路径。",
                    "type": "String"
                }
            ],
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.spi.MysqlModelGenerator"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 37,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 47,
            "description": "easynode.framework.mvc.ActionContext实例",
            "itemtype": "property",
            "name": "ctx",
            "access": "protected",
            "tagname": "",
            "type": "easynode.framework.mvc.ActionContext",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 58,
            "description": "Action参数",
            "itemtype": "property",
            "name": "args",
            "access": "protected",
            "tagname": "",
            "type": "{Array}  Element Notation :\n                             {\n                                      name : '参数名'\n                                      type : '参数类型'\n                                      comment : '参数注释'\n                             }",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 74,
            "description": "视图",
            "itemtype": "property",
            "name": "view",
            "access": "protected",
            "tagname": "",
            "type": "{easynode.framework.mvc.View}",
            "default": "new easynode.framework.mvc.JSONView",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 85,
            "description": "视图渲染参数",
            "itemtype": "property",
            "name": "viewOptions",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "{}",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 98,
            "description": "设置视图。",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "view",
                    "description": "视图",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "opts",
                    "description": "视图渲染参数",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 113,
            "description": "获得视图。",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "当前Action的视图",
                "type": "easynode.framework.mvc.View"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 125,
            "description": "获得视图渲染参数。",
            "itemtype": "method",
            "name": "getViewOptions",
            "return": {
                "description": "opts 视图渲染参数",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 137,
            "description": "获取Action全名。",
            "itemtype": "method",
            "name": "getFullName",
            "return": {
                "description": "Action全名，$module.$action",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 149,
            "description": "设置Action的执行上下文环境。",
            "itemtype": "method",
            "name": "setContext",
            "params": [
                {
                    "name": "ctx",
                    "description": "Action执行上下文环境",
                    "type": "easynode.framework.mvc.ActionContext"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 161,
            "description": "获取Action的执行上下文环境。",
            "itemtype": "method",
            "name": "getContext",
            "return": {
                "description": "Action执行上下文环境",
                "type": "easynode.framework.mvc.ActionContext"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 173,
            "description": "设置模块名，框架内使用，请不要在任何地方调用此函数。",
            "itemtype": "method",
            "name": "setModule",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 187,
            "description": "获取Action的模块名。",
            "itemtype": "method",
            "name": "getModule",
            "return": {
                "description": "Action模块名",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 199,
            "description": "设置Action名，框架内使用，请不要在任何地方调用此函数。",
            "itemtype": "method",
            "name": "setActionName",
            "params": [
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 213,
            "description": "获取Action名。",
            "itemtype": "method",
            "name": "getActionName",
            "return": {
                "description": "Action名",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 225,
            "description": "获取Action参数列表。",
            "itemtype": "method",
            "name": "getArgs",
            "return": {
                "description": "Action参数列表，参考args(protected)属性。",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 237,
            "description": "增加一个或多个参数。可链式调用。",
            "itemtype": "method",
            "name": "addArg",
            "params": [
                {
                    "name": "o",
                    "description": "接受多参，string或JSON对象，对象Notation:\n                             {\n                                     name : '',\n                                     type : '',\n                                     comment : ''\n                             }\n                             type表示实际值类型，默认'string'。\n                             当元素为string型时，接受$name $type $comment格式的简化定义方式，用空格分开名称、类型和备注",
                    "type": "..."
                }
            ],
            "return": {
                "description": "返回this, 可链式调用。",
                "type": "Action"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n     this.addArg('field1', 'field2');                                                //field1 with type string\n     this.addArg({name : 'field1', type : 'int'});                           //field1 with type int\n     // 支持的类型有：\n     string，字符串类型，默认\n     int，     整数型\n     float(x)，浮点数型，保留x位小数\n     array，   数组，每个元素使用\",\"(逗号)分隔\n     date,       日期型\n     datetime,       日期时间型，精确到分钟\n     datetimeS,     日期时间型，精确到秒\n     json,       JSON对象"
            ],
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 294,
            "description": "是否定义了名为name的参数。",
            "itemtype": "method",
            "name": "hasArg",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否包含名为name的参数。",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 312,
            "description": "验证Action的调用上下文环境，通常用于验证上下文环境中的输入参数。",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "返回boolean时，true表示验证参数成功，false表示验证失败。返回对象的示例：\n             {\n                     result : true/false,            //同boolean返回值\n                     msg : '错误消息',               //错误消息，返回到前端\n             }",
                "type": "Object/boolean"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 331,
            "description": "验证Action的调用权限。建议通过RBAC插件统一设置权限校验函数。",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "返回boolean时，true表示验证权限成功，false表示验证权限失败。返回对象的示例：\n             {\n                     result : true/false,            //同boolean返回值\n                     msg : '错误消息',               //错误消息，返回到前端\n             }",
                "type": "Object/boolean"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 350,
            "description": "执行Action处理过程。",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                },
                {
                    "name": "args",
                    "description": "参数表，参数顺序与类型取决于args属性",
                    "type": "..."
                }
            ],
            "return": {
                "description": "返回boolean时，true表示验证参数成功，false表示验证失败。",
                "type": "Object/boolean"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 368,
            "description": "中断Action的执行，并且抛出异常结果，通常使用在process函数中需要直接返回错误结果的情况。在执行Action时，如果\n捕获到的异常是ActionResult实例，则应直接将此ActionResult渲染后返回给客户端。",
            "itemtype": "method",
            "name": "throwErrorResult",
            "params": [
                {
                    "name": "actionResult",
                    "description": "ActionResult实例",
                    "type": "easynode.framework.mvc.ActionResult"
                }
            ],
            "throws": {
                "description": "Error 总是会抛出一个异常。该异常具有一个executeResult属性，传递ActionResult结果。"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 388,
            "description": "Action是否需要数据源支持。默认返回true。",
            "itemtype": "method",
            "name": "datasourceSupport",
            "return": {
                "description": "返回该Action是否需要数据源支持，需要数据库支持时，ActionListener根据此选项连接数据库并自动开启和关闭数据库事务",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/Action.js",
            "line": 401,
            "description": "定义某个类为Action类，为其绑定module和action属性。",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "Action实现类",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n     var Action = using('easynode.framework.mvc.Action');\n     class MyAction extends Action {\n             constructor (env) {\n                     super(env);\n             }\n     }\n\n     // 访问：http://localhost:5000/rest/demoM/demoA\n     Action.define('demoM', 'demoA', MyAction);"
            ],
            "class": "easynode.framework.mvc.Action"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionArgConverter.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionArgConverter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionArgConverter.js",
            "line": 27,
            "description": "根据Action的参数定义，转换参数。\n\n// 支持的类型有：\n     string，字符串类型，默认\n     int，     整数型\n     boolean，boolean型，true/false，true/false, 1/0\n     float(x)，浮点数型，保留x位小数\n     array($type)，   数组，每个元素使用\",\"(逗号)分隔，\"()\"中为存储的实际类型，$type->string, int, float, boolean, date,datetime,datetimeS\n     date,       日期型\n     datetime,       日期时间型，精确到秒\n     datetimeM,     日期时间型，精确到分钟\n     json,       JSON对象",
            "itemtype": "method",
            "name": "convert",
            "params": [
                {
                    "name": "actionRequestParameter",
                    "description": "请求参数来源",
                    "type": "easynode.framework.mvc.ActionRequestParameter"
                },
                {
                    "name": "action",
                    "description": "Action实例",
                    "type": "easynode.framework.mvc.Action"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionArgConverter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 27,
            "description": "Action实例。通过setAction和getAction存取。",
            "itemtype": "property",
            "name": "action",
            "type": "easynode.framework.mvc.Action 子类实例",
            "access": "protected",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 38,
            "description": "easynode.framework.cache.ICache实例。",
            "itemtype": "property",
            "name": "cache",
            "type": "easynode.framework.cache.ICache实例",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 48,
            "description": "easynode.framework.db.IConnection实例。",
            "itemtype": "property",
            "name": "connection",
            "type": "easynode.framework.db.IConnection实例",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 58,
            "description": "easynode.framework.mq.IQueue实例。",
            "itemtype": "property",
            "name": "queue",
            "type": "easynode.framework.mq.IQueue实例",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 68,
            "description": "远程地址(客户端地址)。",
            "itemtype": "property",
            "name": "remoteAddress",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 78,
            "description": "模块名。",
            "itemtype": "property",
            "name": "moduleName",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 87,
            "description": "Action名。",
            "itemtype": "property",
            "name": "actionName",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 98,
            "description": "set action成员。",
            "itemtype": "method",
            "name": "setAction",
            "params": [
                {
                    "name": "action",
                    "description": "Action实例。",
                    "type": "easynode.framework.mvc.Action"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 110,
            "description": "get action成员。",
            "itemtype": "method",
            "name": "getAction",
            "return": {
                "description": "Action实例。",
                "type": "easynode.framework.mvc.Action"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 122,
            "description": "获取此上下文环境中指定名称的参数值。",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认为null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 136,
            "description": "设置参数值。",
            "itemtype": "method",
            "name": "setParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "参数值",
                    "type": "String"
                }
            ],
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 150,
            "description": "获取此上下文环境中指所有的参数。",
            "itemtype": "method",
            "name": "params",
            "return": {
                "description": "json对象",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 162,
            "description": "为ActionContext增加cache支持。",
            "itemtype": "method",
            "name": "setCache",
            "params": [
                {
                    "name": "cache",
                    "description": "cache实例",
                    "type": "easynode.framework.cache.ICache"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 175,
            "description": "设置远程地址。",
            "itemtype": "method",
            "name": "setRemoteAddress",
            "params": [
                {
                    "name": "remoteAddress",
                    "description": "远程IP地址",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 187,
            "description": "获取远程地址。",
            "itemtype": "method",
            "name": "getRemoteAddress",
            "return": {
                "description": "remoteAddress 远程IP地址",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 200,
            "description": "获取cache实例。",
            "itemtype": "method",
            "name": "getCache",
            "return": {
                "description": "cache实例",
                "type": "easynode.framework.cache.ICache"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 212,
            "description": "为ActionContext增加数据库支持。",
            "itemtype": "method",
            "name": "setCache",
            "params": [
                {
                    "name": "connection",
                    "description": "数据库连接实例",
                    "type": "easynode.framework.cache.IConnection"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 224,
            "description": "获取数据库连接实例。",
            "itemtype": "method",
            "name": "getConnection",
            "return": {
                "description": "数据库连接实例",
                "type": "easynode.framework.cache.IConnection"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 236,
            "description": "为ActionContext增加队列支持。",
            "itemtype": "method",
            "name": "setQueue",
            "params": [
                {
                    "name": "queue",
                    "description": "队列实例",
                    "type": "easynode.framework.mq.IQueue"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionContext.js",
            "line": 248,
            "description": "获取队列连接实例。",
            "itemtype": "method",
            "name": "getQueue",
            "return": {
                "description": "队列连接实例",
                "type": "easynode.framework.mq.IQueue"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionContext"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionExecutor.js",
            "line": 21,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionExecutor"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionExecutor.js",
            "line": 36,
            "description": "在ctx上下文环境下，执行Action。<br/>\n<pre>\n执行过程：\n1、调用action的validate函数，如果存在\n2、调用action的authorize函数，如果存在\n3、调用action的process函数(支持AOP)\n\n其中：validate函数和authorize函数都是异步函数，需要返回一个generator。\n</pre>",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                },
                {
                    "name": "opts",
                    "description": "Action执行选项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "执行结果, Notation :\n                             {\n                                     action : easynode.framework.mvc.Action                                  //当action未找到时，可能为空\n                                     actionResult : easynode.framework.mvc.ActionResult\n                             }",
                "type": "Object"
            },
            "since": "0.1.0",
            "async": 1,
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionExecutor"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionExecutor.js",
            "line": 155,
            "description": "在ctx上下文环境下，执行Action。注意：调用此方法执行Action默认不校验参数也不检查执行权限<br/>\n<pre>\n执行过程：\n1、调用action的validate函数，如果存在\n2、调用action的authorize函数，如果存在\n3、调用action的process函数(支持AOP)\n\n其中：validate函数和authorize函数都是异步函数，需要返回一个generator。\n</pre>",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                },
                {
                    "name": "execArgs",
                    "description": "Action执行参数，默认null, 如果传递此参数，被调用的参数将使用将对象中的数据，否则使用ctx中的param数据",
                    "type": "Object"
                },
                {
                    "name": "doValidation",
                    "description": "是否执行Action的参数校验validate方法，默认为false",
                    "type": "Boolean"
                },
                {
                    "name": "doAuthorize",
                    "description": "是否执行Action的权限校验authorize方法，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "执行结果",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionExecutor"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 23,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 35,
            "description": "注册一个Action。使得可以通过json api或restful api来调用。注册的Action可以是一个类、一个全类名\n或一个Action实例。\n<h5>http://localhost:5000/json?m=actionModule&a=actionName</h5>\n<h5>http://localhost:5000/rest/actionModule/actionName</h5>",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "actionClass",
                    "description": "Action类名或类，它是一个js文件的EasyNode字符串命名空间表示",
                    "type": "String/Class"
                },
                {
                    "name": "moduleName",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "actionName",
                    "description": "action名",
                    "type": "String"
                },
                {
                    "name": "description",
                    "description": "Action功能描述",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n\n     var Action = using('easynode.framework.mvc.Action');\n     var ActionFactory = using('easynode.framework.mvc.ActionFactory');\n     class MyAction extends Action {\n             constructor (env) {\n                     super(env);\n             }\n     }\n\n     // 访问：http://localhost:5000/rest/demoM/demoA\n     MyAction.module = 'demoM';\n     MyAction.action = 'demoA';\n\n     // 与如下语句相同。\n     Action.define('demoM', 'demoA', MyAction);\n\n     ActionFactory.register(MyAction);"
            ],
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 115,
            "description": "删除一个Action。",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名，不传时表示删除m模块下所有的Action。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 135,
            "description": "加载目录中所有文件名匹配pattern的Action。pattern默认为：/^.*Action\\.js$/。如果将MethodDispatchedAction与一般Action\n放在一个目录，建议将MethodDispatchedAction命名为XXXActions.js。",
            "itemtype": "method",
            "name": "registerNamespace",
            "params": [
                {
                    "name": "namespace",
                    "description": "命名空间，指明一个源码目录。",
                    "type": "String"
                },
                {
                    "name": "pattern",
                    "description": "Action文件的pattern, 默认为/^.*Action\\.js$/",
                    "type": "RegExp"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 162,
            "description": "加载一个根据函数名路由的Action。",
            "itemtype": "method",
            "name": "registerMethodDispatchedAction",
            "params": [
                {
                    "name": "namespace",
                    "description": "String: 命名空间，指明一个全类名；Class : 类，要求继承于MethodDispatchedAction",
                    "type": "String/Class"
                },
                {
                    "name": "moduleName",
                    "description": "模块名",
                    "type": "String"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 185,
            "description": "从.json文件中加载Action。",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "",
                    "description": "文件相对路径，多参",
                    "type": "...",
                    "multiple": true
                }
            ],
            "async": 1,
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 231,
            "description": "查找一个Action。",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Action实现类，继承自easynode.framework.mvc.Action。",
                "type": "easynode.framework.mvc.Action"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 249,
            "description": "枚举出所有的Action。",
            "itemtype": "method",
            "name": "list",
            "params": [
                {
                    "name": "m",
                    "description": "模块名，不传时表示枚举所有的Action。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Action实现类数组，继承自easynode.framework.mvc.Action。",
                "type": "Array"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 273,
            "description": "创建一个Action实例。",
            "itemtype": "method",
            "name": "createActionInstance",
            "params": [
                {
                    "name": "m",
                    "description": "模块名。",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名。",
                    "type": "String"
                },
                {
                    "name": "ctx",
                    "description": "ActionContext实例。",
                    "type": "easynode.framework.mvc.ActionContext"
                }
            ],
            "return": {
                "description": "Action实例，不是Action类。",
                "type": "easynode.framework.mvc.Action"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFactory.js",
            "line": 321,
            "description": "注册action信息",
            "itemtype": "method",
            "name": "addActionDescription",
            "params": [],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFilter.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFilter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFilter.js",
            "line": 29,
            "description": "过滤Action执行。",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "Action实例",
                    "type": "Action"
                },
                {
                    "name": "stack",
                    "description": "Action的authorize、validate和process方法调用参数栈，该栈的第一个参数总是为ActionContext实例",
                    "type": "Array"
                },
                {
                    "name": "next",
                    "description": "下一个元素",
                    "type": "Generator"
                }
            ],
            "return": {
                "description": "返回ActionResult实例，返回null值表示filter执行完成",
                "type": "ActionResult"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFilter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFilter.js",
            "line": 49,
            "description": "向系统的Action过滤器链中增加一个或多个过滤器。",
            "itemtype": "method",
            "name": "addFilter",
            "params": [
                {
                    "name": "f",
                    "description": "ActionFilter实例或具有filter成员函数(generator)的对象，一个或多个",
                    "type": ".."
                }
            ],
            "return": {
                "description": "返回ActionFilter，可链式调用",
                "type": "ActionFilter"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFilter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionFilter.js",
            "line": 67,
            "description": "向系统的Action过滤器链中增加一个或多个过滤器。",
            "itemtype": "method",
            "name": "addFilter",
            "params": [
                {
                    "name": "f",
                    "description": "ActionFilter实例，一个或多个",
                    "type": ".."
                }
            ],
            "return": {
                "description": "返回ActionFilter，可链式调用",
                "type": "ActionFilter"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionFilter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 28,
            "description": "获取HTTP请求参数。注意：EasyNode使用'first'模式取query string参数，参数名相同时，先出现的值有效。",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "从哪里取参数，枚举，可以为\"query\"(query string)，\"body“(http body, POST时有效)，\n     \"all\"(body或query,body优先)，默认”all“",
                    "type": "String"
                }
            ],
            "return": {
                "description": "参数值",
                "type": "String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 44,
            "description": "是否传递了某个请求参数。",
            "itemtype": "method",
            "name": "hasParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "从哪里取参数，枚举，可以为\"query\"(query string)，\"body“(http body, POST时有效)，\n     \"all\"(body或query,body优先)，默认”all“",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否有此参数",
                "type": "Boolean"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 60,
            "description": "获取HTTP请求参数名称。",
            "itemtype": "method",
            "name": "paramNames",
            "params": [
                {
                    "name": "where",
                    "description": "从哪里取参数名，枚举，可以为\"query\"(query string)，\"body“(http body, POST时有效)，\n     \"all\"(body或query,body优先)，默认”all“",
                    "type": "String"
                }
            ],
            "return": {
                "description": "参数名",
                "type": "Array"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 75,
            "description": "获取上传的文件描述，POST且enctype=\"multipart-form-data\"时有效。没有指定参数名的文件时，返回null。",
            "itemtype": "method",
            "name": "file",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的文件描述。结构如下：\n                             {\n                                     field : 'file1',\n                                                        name : 'xx.jpg',\n                                                        mime : 'image/jpeg',\n                                                        path : '/tmp/adksl1234j123/xx.jpg'\n                             }",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 94,
            "description": "保存文件到上传目录。",
            "itemtype": "method",
            "name": "saveFile",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的文件描述。结构参考：file()函数。",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 108,
            "description": "枚举所有上传的文件参数名（字段名）。",
            "itemtype": "method",
            "name": "fileNames",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的所有文件参数名（字段名）",
                "type": "Array"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 122,
            "description": "获取HTTP参数值，转成Number的整型。",
            "itemtype": "method",
            "name": "intParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                },
                {
                    "name": "canNaN",
                    "description": "是否允许NaN，如果是false, 当值为NaN时将被转成0",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 143,
            "description": "获取HTTP参数值，转成Number的整型。",
            "itemtype": "method",
            "name": "floatParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                },
                {
                    "name": "canNaN",
                    "description": "是否允许NaN，如果是false, 当值为NaN时将被转成0",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 162,
            "description": "获取HTTP参数值，转成boolean型。",
            "itemtype": "method",
            "name": "booleanParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 177,
            "description": "获取HTTP参数值，转成数组型。",
            "itemtype": "method",
            "name": "booleanParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数组中的元素实际类型，支持string, int, float, boolean, date, datetime, datetimeM",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 273,
            "description": "获取HTTP参数值，转成日期型。日期格式需要是：YYYY-MM-DD HH24:MI:SS, 例：2015-05-13 12:00:00，可只传日期部分。\n日期格式请参考：date-utils模块。",
            "itemtype": "method",
            "name": "dateParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "格式错误时返回null。",
                "type": "Date"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 303,
            "description": "获取HTTP参数值，转成日期时间型(精确到秒)。日期格式需要是：YYYY-MM-DD HH24:MI:SS, 例：2015-05-13 12:00:00，可只传日期部分。\n日期格式请参考：date-utils模块。",
            "itemtype": "method",
            "name": "datetimeParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "格式错误时返回null。",
                "type": "Date"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 332,
            "description": "获取HTTP参数值，转成日期时间型(精确到分钟)。日期格式需要是：YYYY-MM-DD HH24:MI:SS, 例：2015-05-13 12:00:00，可只传日期部分。\n日期格式请参考：date-utils模块。",
            "itemtype": "method",
            "name": "datetimeMParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "query, body or both of two with 'all'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "格式错误时返回null。",
                "type": "Date"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionRequestParameter.js",
            "line": 365,
            "description": "保存指定的文件，获取HTTP参数值，转成文件对象，语义化函数，同saveFile()函数。",
            "itemtype": "method",
            "name": "fileParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Notation参考file函数。",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionRequestParameter"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 16,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 31,
            "description": "将错误码(或正确码)转换为错误消息，从EasyNode.i18n配置中取消息内容　。",
            "itemtype": "method",
            "name": "code2Message",
            "params": [
                {
                    "name": "code",
                    "description": "错误码",
                    "type": "String/int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 43,
            "description": "创建一个code为ActionResult.CODE_SUCC的ActionResult实例。",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 55,
            "description": "创建一个code为ActionResult.CODE_SUCC的ActionResult实例。",
            "itemtype": "method",
            "name": "createSuccessResult",
            "params": [
                {
                    "name": "result",
                    "description": "结果",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 68,
            "description": "创建一个code为ActionResult.CODE_ERROR的ActionResult实例。",
            "itemtype": "method",
            "name": "createErrorResult",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 80,
            "description": "创建一个code为ActionResult.CODE_ACTION_RETURN_NOTHING的ActionResult实例。",
            "itemtype": "method",
            "name": "createNoReturnResult",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 92,
            "description": "创建一个code为ActionResult.CODE_ACTION_NOT_FOUND的ActionResult实例。",
            "itemtype": "method",
            "name": "createActionNotFoundResult",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 104,
            "description": "创建一个code为ActionResult.CODE_ACTION_VALIDATE_FAIL的ActionResult实例。",
            "itemtype": "method",
            "name": "createValidateFailResult",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 116,
            "description": "创建一个code为ActionResult.CODE_ACTION_VALIDATE_FAIL的ActionResult实例。",
            "itemtype": "method",
            "name": "createAuthorizeFailResult",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 128,
            "description": "创建一个code为ActionResult.CODE_NO_IMPLEMENTATION的ActionResult实例。",
            "itemtype": "method",
            "name": "createNoImplementationError",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 140,
            "description": "创建一个code为ActionResult.CODE_NO_SESSION的ActionResult实例。",
            "itemtype": "method",
            "name": "createNoSessionError",
            "return": {
                "description": "",
                "type": "easynode.framework.mvc.ActionResult"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 152,
            "description": "设置result。可链式调用",
            "itemtype": "method",
            "name": "setResult",
            "params": [
                {
                    "name": "result",
                    "description": "返回值",
                    "type": "Object"
                },
                {
                    "name": "msg",
                    "description": "文本消息",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 170,
            "description": "设置错误，注意，调用此函数会将result置空({})。0-1000为EasyNode保留码，应用中或插件中错误码(code)应 < -1000或 > 1000。",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "code",
                    "description": "返回码，当code为String型时，支持$code:$msg格式或不含code只含message(此时code被设置为0);",
                    "type": "Int/String"
                },
                {
                    "name": "msg，可不传",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "来源文件，会从EasyNode.i18n配置中取返回消息。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 204,
            "description": "设置响应码，响应消息和响应数据。0-1000为EasyNode保留码，应用中或插件中错误码(code)应 < -1000或 > 1000。",
            "itemtype": "method",
            "name": "response",
            "params": [
                {
                    "name": "code",
                    "description": "返回码，当code为String型时，支持$code:$msg格式或不含code只含message(此时code被设置为0);",
                    "type": "Int/String"
                },
                {
                    "name": "msg，可不传",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "result",
                    "description": "响应数据",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/ActionResult.js",
            "line": 223,
            "description": "判定是否为成功的Action调用结果",
            "itemtype": "method",
            "name": "isSuccess",
            "return": {
                "description": "是否为成功的Action调用结果(this.code === 0)",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ActionResult"
        },
        {
            "file": "../src/easynode/framework/mvc/CombinedAction.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.CombinedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/CombinedAction.js",
            "line": 33,
            "description": "增加一个组合Action调用。",
            "itemtype": "method",
            "name": "combine",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "调用$module.$action后返回的ActionResult的值，默认为$module.$action",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.CombinedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/CombinedAction.js",
            "line": 54,
            "description": "设置Action处理监听器。支持在任何Action执行前后插入处理函数，这些函数是异步函数，它会在处理流程中被顺序\n执行。",
            "itemtype": "method",
            "name": "setProcessListener",
            "params": [
                {
                    "name": "when",
                    "description": "\"before\"/\"after\"，分别表示Action处理前和Action处理后",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "组合的Action名称，\"*\"表示所有的Action，同combine函数的name参数。",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "异步函数，应传递generator的高阶函数，此函数被绑定到CombinedAction实例执行\n             函数签名：before-* : function(ctx) {}                ctx, ActionContext实例\n                                after-* : function(ctx, results) {}     ctx, ActionContext实例，results : CombinedAction的处理结果。\n                                                                                          当此函数返回ActionResult实例时，CombinedAction的ActionResult将被设置为此ActionResult\n                                before-$action : function(ctx, $args, $ results) {}  ctx, ActionContext实例，$args: Action参数, results : CombinedAction的处理结果\n                                after-$action : function(ctx, $args, $ results) {}  ctx, ActionContext实例，$args: Action参数, results : CombinedAction的处理结果",
                    "type": "Generator"
                }
            ],
            "class": "easynode.framework.mvc.CombinedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/CombinedAction.js",
            "line": 74,
            "description": "组合的Action　process实现函数，按组合顺序执行Action，与一般的执行不同，组合执行时，会在process函数调用时\n压入前面action执行结果，如果各个Action之前没有关联关系，可忽略该参数。",
            "itemtype": "method",
            "name": "process",
            "class": "easynode.framework.mvc.CombinedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/EJSTemplateViewRenderer.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.EJSTemplateViewRenderer"
        },
        {
            "file": "../src/easynode/framework/mvc/IActionContextListener.js",
            "line": 15,
            "description": "ActionContext创建时被调用。此时ctx.getAction()可能为null。",
            "itemtype": "method",
            "name": "onCreate",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.IActionContextListener"
        },
        {
            "file": "../src/easynode/framework/mvc/IActionContextListener.js",
            "line": 29,
            "description": "ActionContext的action被执行前调用。",
            "itemtype": "method",
            "name": "onActionReady",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.IActionContextListener"
        },
        {
            "file": "../src/easynode/framework/mvc/IActionContextListener.js",
            "line": 43,
            "description": "ActionContext销毁时被调用。",
            "itemtype": "method",
            "name": "onDestroy",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.IActionContextListener"
        },
        {
            "file": "../src/easynode/framework/mvc/IActionContextListener.js",
            "line": 57,
            "description": "Action调用发生异常时被调用。",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "ctx",
                    "description": "ActionContext实例",
                    "type": "easynode.framework.mvc.ActionContext"
                },
                {
                    "name": "err",
                    "description": "异常实例",
                    "type": "Error"
                }
            ],
            "async": 1,
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.IActionContextListener"
        },
        {
            "file": "../src/easynode/framework/mvc/ITemplateViewRenderer.js",
            "line": 16,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "actionResult",
                    "description": "ActionResult",
                    "type": "easynode.framework.mvc.ActionResult"
                },
                {
                    "name": "template",
                    "description": "模板字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "模板渲染结果字符串",
                "type": "String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ITemplateViewRenderer"
        },
        {
            "file": "../src/easynode/framework/mvc/JSONView.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.JSONView"
        },
        {
            "file": "../src/easynode/framework/mvc/JSONView.js",
            "line": 27,
            "description": "获取渲染类型，json/html，影响response content-type。",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "返回body类型, json/html",
                "type": "String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.JSONView"
        },
        {
            "file": "../src/easynode/framework/mvc/JSONView.js",
            "line": 40,
            "description": "渲染ActionResult。",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "actionResult",
                    "description": "Action执行结果",
                    "type": "easynode.framework.mvc.ActionResult"
                }
            ],
            "return": {
                "description": "返回渲染结果，JSON对象或者String",
                "type": "Object"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.JSONView"
        },
        {
            "file": "../src/easynode/framework/mvc/JadeTemplateViewRenderer.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.JadeTemplateViewRenderer"
        },
        {
            "file": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "moduleName",
                    "description": "Action模块名",
                    "type": "String"
                },
                {
                    "name": "entryMethodPrefix",
                    "description": "action处理函数名前缀，默认action_",
                    "type": "String"
                },
                {
                    "name": "argDefineMethodPrefix",
                    "description": "action参数定义函数名前缀，默认arg_",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.MethodDispatchedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "line": 37,
            "description": "添加一个Action入口。",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "entry",
                    "description": "函数，应当总是返回一个对象，该对象的defineArgs和process函数会绑定到一个Action的实例上执行。\n     对象原型为：{\n                                     brief : 'action简述',\n                                     defineArgs : function() {\n                                             this.addArg('a string comment of a');\n                                     },\n                                     process : function(ctx, arg1, arg2) {\n                                             return function * () {\n                                                     return ActionResult.createSuccessResult('MDA');\n                                             };\n                                     }\n                           }",
                    "type": "Function"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.MethodDispatchedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "line": 65,
            "description": "获取或设置Action模块名。",
            "itemtype": "method",
            "name": "moduleName",
            "params": [
                {
                    "name": "name",
                    "description": "传递此参数时，设置；不传递此参数时获取。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.MethodDispatchedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/MethodDispatchedAction.js",
            "line": 81,
            "description": "注册所有符合命名规范的Action。Action的模块名为设置的moduleName，Action的名称为处理函数去\"processMethodPrefix\"(默认：action_)。\n例如：action_aaa返回\"aaa\"。",
            "itemtype": "method",
            "name": "register",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.MethodDispatchedAction"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 19,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 39,
            "description": "定义模型字段，子类可以覆盖该函数以在创建子类模型实例时即定义好字段。",
            "itemtype": "method",
            "name": "defineFields",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 51,
            "description": "获取模型对应的Schema名称。",
            "itemtype": "method",
            "name": "getSchema",
            "return": {
                "description": "schema名称",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 63,
            "description": "获取模型对应的view的名称，这里的View指的是关系数据库的视图。",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "view名称",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 75,
            "description": "判定模型的视图是否为原生SQL视图。",
            "itemtype": "method",
            "name": "isRawView",
            "return": {
                "description": "模型的视图是否为原生SQL视图。原生视图匹配^SELECT\\s+.*正则",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 87,
            "description": "定义一个模型字段，可链式调用。",
            "itemtype": "method",
            "name": "defineField",
            "params": [
                {
                    "name": "name",
                    "description": "字段名或字段实例，\n                             当只传递name参数时，name被 认为是一个字段实例。\n                             注意：字段命名请一律使用驼峰命名",
                    "type": "String/easynode.framework.mvc.ModelField"
                },
                {
                    "name": "type",
                    "description": "字段类型, easynode.framework.mvc.ModelField.TYPE_*枚举",
                    "type": "String"
                },
                {
                    "name": "maxLength",
                    "description": "最大长度(in bytes)，默认0",
                    "type": "Int"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认null",
                    "type": "Object"
                },
                {
                    "name": "nullable",
                    "description": "可否为空,　默认true",
                    "type": "Boolean"
                },
                {
                    "name": "comment",
                    "description": "注释, 默认''（空字符串）",
                    "type": "String"
                },
                {
                    "name": "readonly",
                    "description": "是否为只读字段，只读字段只出现在查询和读取时，忽略其在写入时的行为",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 120,
            "description": "设置主键字段名",
            "itemtype": "method",
            "name": "setIdentifyField",
            "params": [
                {
                    "name": "name",
                    "description": "主键字段名",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 134,
            "description": "获取主键字段名",
            "itemtype": "method",
            "name": "getIdentifyField",
            "return": {
                "description": "主键字段名",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 161,
            "description": "获取主键字段值",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "主键字段值",
                "type": "String/int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 173,
            "description": "设置主键字段值",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "id",
                    "description": "主键字段值",
                    "type": "String/int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 186,
            "description": "获取字段列表，字段列表的顺序取决于定义的顺序。",
            "itemtype": "method",
            "name": "getFieldNames",
            "params": [
                {
                    "name": "all",
                    "description": "是否返回所有字段名，true：返回所有字段名，false：仅返回非只读字段。",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "模型字段列表",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 218,
            "description": "获取字段定义",
            "itemtype": "method",
            "name": "getFieldDefinition",
            "return": {
                "description": "字段定义",
                "type": "easynode.framework.mvc.ModelField"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 232,
            "description": "获取字段值",
            "itemtype": "method",
            "name": "getFieldValue",
            "return": {
                "description": "字段值",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 247,
            "description": "设置字段值",
            "itemtype": "method",
            "name": "setFieldValue",
            "params": [
                {
                    "name": "name",
                    "description": "字段名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "字段值",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 308,
            "description": "使用JSON快速设置所有的字段值，可链式调用",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "obj",
                    "description": "JSON对象，属性名应与要设置的字段同名",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 329,
            "description": "使用JSON快速设置所有的字段值，可链式调用，merge函数的别名函数。",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "obj",
                    "description": "JSON对象，属性名应与要设置的字段同名",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 341,
            "description": "获取字段所有值。",
            "itemtype": "method",
            "name": "getFieldValues",
            "return": {
                "description": "字段值。",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/Model.js",
            "line": 353,
            "description": "根据模型定义，格式化值，主要是JSON对象的格式化，其他字段只要和数据库定义匹配即能够获得正确的类型",
            "itemtype": "method",
            "name": "normalizeJSON",
            "params": [
                {
                    "name": "model",
                    "description": "模型",
                    "type": "easynode.framework.mvc.Model"
                },
                {
                    "name": "values",
                    "description": "model数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "新的模型",
                "type": "easynode.framework.mvc.Model"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.Model"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 25,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 43,
            "description": "字段名称",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 52,
            "description": "字段类型，ModelField.TYPE_*枚举",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 61,
            "description": "字段最大长度，默认为0（不限制长度）",
            "itemtype": "property",
            "name": "maxLength",
            "type": "int",
            "default": "0",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 71,
            "description": "字段默认值。",
            "itemtype": "property",
            "name": "defaultValue",
            "type": "variant",
            "default": "0",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 81,
            "description": "字段可否为空。",
            "itemtype": "property",
            "name": "nullable",
            "type": "boolean",
            "default": "true",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 91,
            "description": "字段备注。",
            "itemtype": "property",
            "name": "comment",
            "type": "String",
            "default": "''(empty string)",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 101,
            "description": "是否为只读字段。",
            "itemtype": "property",
            "name": "readonly",
            "type": "boolean",
            "default": "false",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 118,
            "description": "string 型",
            "itemtype": "property",
            "name": "ModelField.TYPE_STRING",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 127,
            "description": "int型",
            "itemtype": "property",
            "name": "ModelField.TYPE_INT",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 136,
            "description": "float型",
            "itemtype": "property",
            "name": "ModelField.TYPE_FLOAT",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 145,
            "description": "日期型",
            "itemtype": "property",
            "name": "ModelField.TYPE_DATE",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 154,
            "description": "日期时间型",
            "itemtype": "property",
            "name": "ModelField.TYPE_DATETIME",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelField.js",
            "line": 163,
            "description": "JSON类型，数据库实际存储为VARCHAR或TEXT",
            "itemtype": "property",
            "name": "ModelField.TYPE_JSON",
            "type": "String",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelField"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 25,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "modelFactory",
                    "description": "模型工厂，需要接口函数：getModel()，返回一个easynode.framework.mvc.Model实例。",
                    "type": "Object"
                },
                {
                    "name": "m",
                    "description": "模块名，如果不传则使用modelFactory中的模型的schema。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 42,
            "description": "获取代理模型create函数的Action原型类，返回的是一个动态的类，而不是一个实例。",
            "itemtype": "method",
            "name": "getCreateAction",
            "params": [
                {
                    "name": "fieldNames",
                    "description": "创建时支持写入的字段名数组，'*'表示可以写入任何字段",
                    "type": "Array/String"
                },
                {
                    "name": "view",
                    "description": "该Action使用的视图，默认为new JSONView()，如需要显示HTML页面，请传入\n                                                     TemplateView实例。",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "l",
                    "description": "事件监听器，分别在开始创建前调用beforeCreate，在创建完成后调用afterCreate，这两个函数均是async函数，\n                                  并且会被bind到action实例上执行，因此可以在这两个函数中使用this引用到action。\n\n                                                                     // example\n                                                                     Notation & Example : {\n                                                                             beforeCreate : function(model, actionCtx) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             },\n\n                                                                             afterCreate : function(model, actionCtx, insertId) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             }\n                                                                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 110,
            "description": "获取代理模型read函数的Action原型类，返回的是一个动态的类，而不是一个实例。",
            "itemtype": "method",
            "name": "getReadAction",
            "params": [
                {
                    "name": "view",
                    "description": "该Action使用的视图，默认为new JSONView()，如需要显示HTML页面，请传入\n                                                     TemplateView实例。",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "l",
                    "description": "事件监听器，分别在开始创建前调用beforeRead，在创建完成后调用afterRead，这两个函数均是async函数，\n                                  并且会被bind到action实例上执行，因此可以在这两个函数中使用this引用到action。\n\n                                                                     // example\n                                                                     Notation & Example : {\n                                                                             beforeRead : function(model, actionCtx, id) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             },\n\n                                                                             afterRead : function(model, actionCtx, id, data) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             }\n                                                                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 173,
            "description": "获取代理模型update函数的Action原型类，返回的是一个动态的类，而不是一个实例。",
            "itemtype": "method",
            "name": "getUpdateAction",
            "params": [
                {
                    "name": "fieldNames",
                    "description": "创建时支持更新的字段名数组，'*'表示可以更新任何字段",
                    "type": "Array/String"
                },
                {
                    "name": "view",
                    "description": "该Action使用的视图，默认为new JSONView()，如需要显示HTML页面，请传入\n                                                     TemplateView实例。",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "l",
                    "description": "事件监听器，分别在开始创建前调用beforeUpdate，在创建完成后调用afterUpdate，这两个函数均是async函数，\n                                  并且会被bind到action实例上执行，因此可以在这两个函数中使用this引用到action。\n\n                                                                     // example\n                                                                     Notation & Example : {\n                                                                             beforeUpdate : function(model, actionCtx, id) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             },\n\n                                                                             afterUpdate : function(model, actionCtx, id) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             }\n                                                                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 242,
            "description": "获取代理模型del函数的Action原型类，返回的是一个动态的类，而不是一个实例。",
            "itemtype": "method",
            "name": "getDelAction",
            "params": [
                {
                    "name": "view",
                    "description": "该Action使用的视图，默认为new JSONView()，如需要显示HTML页面，请传入\n                                                     TemplateView实例。",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "l",
                    "description": "事件监听器，分别在开始创建前调用beforeDel，在创建完成后调用afterDel，这两个函数均是async函数，\n                                  并且会被bind到action实例上执行，因此可以在这两个函数中使用this引用到action。\n\n                                                                     // example\n                                                                     Notation & Example : {\n                                                                             beforeDel : function(model, actionCtx, ids) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             },\n\n                                                                             afterDel : function(model, actionCtx, ids) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             }\n                                                                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/ModelProxyActionFactory.js",
            "line": 304,
            "description": "获取代理模型del函数的Action原型类，返回的是一个动态的类，而不是一个实例。",
            "itemtype": "method",
            "name": "getListAction",
            "params": [
                {
                    "name": "conditions",
                    "description": "查询条件字段、比较表达式. Notation : {\n                                                                                                                     $fieldName1 : $expression\n                                                                                                                     $fieldName2 : $expression\n                                                                                                                     }",
                    "type": "Object"
                },
                {
                    "name": "orderBy",
                    "description": "排序字段，参考：IConnection.list的orderBy参数，支持参数中使用__orderBy__参数修改默认排序",
                    "type": "Array"
                },
                {
                    "name": "conditionPattern",
                    "description": "条件组合模板，参考参考：IConnection.list的conditionPattern参数",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "该Action使用的视图，默认为new JSONView()，如需要显示HTML页面，请传入\n                                                     TemplateView实例。",
                    "type": "easynode.framework.mvc.View"
                },
                {
                    "name": "l",
                    "description": "事件监听器，分别在开始创建前调用beforeList，在创建完成后调用afterList，这两个函数均是async函数，\n                                  并且会被bind到action实例上执行，因此可以在这两个函数中使用this引用到action。\n                                  在beforeList函数中，可以返回一个string表示一个新的conditionPattern，实际查询时将按新的conditionPattern\n                                  组织SQL逻辑。\n\n                                                                     // example\n                                                                     Notation & Example : {\n                                                                             beforeList : function(model, actionCtx, conditions, pagination, orderBy, conditionPattern) {\n                                                                                     return function * () {\n                                                                                             return 'AND $pluginName$ OR $pluginVersion$';\n                                                                                     };\n                                                                             },\n\n                                                                             afterList : function(model, actionCtx, result) {\n                                                                                     return function * () {\n                                                                                     };\n                                                                             }\n                                                                     }",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.ModelProxyActionFactory"
        },
        {
            "file": "../src/easynode/framework/mvc/MustacheTemplateViewRenderer.js",
            "line": 33,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.MustacheTemplateViewRenderer"
        },
        {
            "file": "../src/easynode/framework/mvc/TemplateView.js",
            "line": 29,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "tplFile",
                    "description": "模板文件，默认为空，可在渲染时通过参数opt指定。",
                    "type": "String"
                },
                {
                    "name": "engine",
                    "description": "模板引擎，枚举TemplateView.ENGINE_EJS/TemplateView.ENGINE_MUSTACHE",
                    "type": "String"
                },
                {
                    "name": "dir",
                    "description": "模板目录",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.view.TemplateView"
        },
        {
            "file": "../src/easynode/framework/mvc/TemplateView.js",
            "line": 133,
            "description": "mustache模板引擎，适配模板文件后缀.mst",
            "itemtype": "property",
            "name": "ENGINE_MUSTACHE",
            "type": "{String}",
            "default": "mustache",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.view.TemplateView"
        },
        {
            "file": "../src/easynode/framework/mvc/TemplateView.js",
            "line": 145,
            "description": "ejs模板引擎，适配模板文件后缀.ejs",
            "itemtype": "property",
            "name": "ENGINE_EJS",
            "type": "{String}",
            "default": "ejs",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.view.TemplateView"
        },
        {
            "file": "../src/easynode/framework/mvc/TemplateView.js",
            "line": 157,
            "description": "jade模板引擎，适配模板文件后缀.jade",
            "itemtype": "property",
            "name": "ENGINE_JADE",
            "type": "{String}",
            "default": "jade",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.view.TemplateView"
        },
        {
            "file": "../src/easynode/framework/mvc/View.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.View"
        },
        {
            "file": "../src/easynode/framework/mvc/View.js",
            "line": 27,
            "description": "获取渲染类型，json/html，影响response content-type。",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "返回body类型, json/html",
                "type": "String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.View"
        },
        {
            "file": "../src/easynode/framework/mvc/View.js",
            "line": 40,
            "description": "渲染ActionResult。",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "actionResult",
                    "description": "Action执行结果",
                    "type": "easynode.framework.mvc.ActionResult"
                },
                {
                    "name": "opts",
                    "description": "保留参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回渲染结果，JSON对象或者String",
                "type": "Object"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.mvc.View"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 28,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "name",
                    "description": "插件名称",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "插件版本，默认'0.0.1'",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 42,
            "description": "插件名称",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 49,
            "description": "插件版本，格式：major.minor.patch",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 58,
            "description": "插件简述，默认与插件名称一致。",
            "itemtype": "property",
            "name": "brief",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 67,
            "description": "插件详细描述",
            "itemtype": "property",
            "name": "description",
            "type": "String",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 78,
            "description": "插件配置项",
            "itemtype": "property",
            "name": "configurations",
            "type": "Object",
            "default": "{}",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 89,
            "description": "插件国际化配置项",
            "itemtype": "property",
            "name": "i18nConfig",
            "type": "Object",
            "default": "{}",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 100,
            "description": "是否已经加载",
            "itemtype": "property",
            "name": "_load",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "default": "{}",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 112,
            "description": "获取插件根目录，插件根目录: $EasyNode/plugins/$plugin。",
            "itemtype": "method",
            "name": "home",
            "return": {
                "description": "插件home目录。绝对目录。",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 124,
            "description": "获取指定插件资源的相对路径（相对于EasyNode Home目录）。plugins/$pluginName/$relative",
            "itemtype": "method",
            "name": "relative",
            "params": [
                {
                    "name": "p",
                    "description": "插件资源相对路径",
                    "type": "String"
                }
            ],
            "return": {
                "description": "插件资源目录，相对于EasyNode目录。",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 137,
            "description": "获取指定插件资源的绝对路径。",
            "itemtype": "method",
            "name": "real",
            "params": [
                {
                    "name": "p",
                    "description": "插件资源相对路径",
                    "type": "String"
                }
            ],
            "return": {
                "description": "插件资源的绝对路径",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 150,
            "description": "插件是否已经加载。",
            "itemtype": "method",
            "name": "isLoad",
            "return": {
                "description": "是否已经加载",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 162,
            "description": "读取插件描述文件，插件描述文件应该位于插件根目录下，命名为：$plugin.md，$plugin为插件名称。",
            "itemtype": "method",
            "name": "getDescription",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 186,
            "description": "初始化插件。",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "loadCtx",
                    "description": "插件加载环境",
                    "type": "easynode.framework.plugin.PluginLoadContext"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 201,
            "description": "设置或获取插件配置。",
            "itemtype": "method",
            "name": "config",
            "params": [
                {
                    "name": "item",
                    "description": "配置项名称，当配置项为object并且只有一个参数时则合并配置项到插件配置",
                    "type": "Object/String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认为null",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 219,
            "description": "获取插件Web目录，插件Web目录为：$plugin/www/，要求插件目录下有且仅有一个以插件名命名的目录，否则视为无效Web目录。",
            "itemtype": "method",
            "name": "getWebDir",
            "return": {
                "description": "插件Web目录，没有www目录时返回null",
                "type": "String"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 245,
            "description": "设置或获取插件国际化配置。",
            "itemtype": "method",
            "name": "i18n",
            "params": [
                {
                    "name": "item",
                    "description": "配置项名称，当配置项为object并且只有一个参数时则合并配置项到插件国际化配置",
                    "type": "Object/String"
                },
                {
                    "name": "prefix",
                    "description": "配置项前缀，如果传递此值，请始终传递__filename，__filename会被转成namespace(file) + '.' + name;",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 266,
            "description": "获取插件i18n字符串。消息来自于i18n配置文件，i18n配置项为：plugin.$pluginName[.$subKey].$code",
            "itemtype": "method",
            "name": "formatString",
            "params": [
                {
                    "name": "key",
                    "description": "string标识。",
                    "type": "String"
                },
                {
                    "name": "subKey",
                    "description": "string子项，默认为null",
                    "type": "String"
                }
            ],
            "return": {
                "description": "i18n字符串",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 281,
            "description": "获取插件i18n字符串 - 响应ActionResult专用。消息来自于i18n配置文件，i18n配置项为：plugin.$pluginName.results.$code",
            "itemtype": "method",
            "name": "formatResult",
            "params": [
                {
                    "name": "key",
                    "description": "string标识。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ActionResult i18n字符串",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 294,
            "description": "设置插件依赖。如果没有找到依赖的插件则抛出错误。",
            "itemtype": "method",
            "name": "depends",
            "params": [
                {
                    "name": "plugins",
                    "description": "插件，多参，每个参数为字符串类型。格式：$pluginName@$version",
                    "type": "..."
                }
            ],
            "return": {
                "description": "this 可链式调用"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 309,
            "description": "检查插件依赖",
            "itemtype": "method",
            "name": "checkDependency",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 328,
            "description": "覆盖GenericObject.toJSON()函数。",
            "itemtype": "method",
            "name": "toJSON",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 347,
            "description": "读取easynode.plugins配置项，按配置项顺序加载EasyNode插件，请注意插件的依赖关系。<br/>\neasynode.plugins配置项示例：plugin1,plugin2,plugin3<br/>\n所有的EasyNode插件应位于$EasyNode/plugins目录。例：$EasyNode/plugins/plugin1/<br/>\n在插件目录下增加一个.ignore文件可忽略该插件的加载。<br/>\n执行流程<br/>\n<pre>\n      插件加载流程如下：\n     1. 将插件目录下的src目录加入到EasyNode源码目录\n     2. 读取插件目录下的etc目录下$plugin.conf文件（注意：不递归加载），视为配置文件并加载到插件配置，conf文件格式同EasyNode.conf\n     3. 读取插件目录下的etc/i18n目录下的与EasyNode Locale设定相同的.conf文件，作为国际化文件加载\n     4. 加载插件目录下的src/$pluginName_PluginEntry.js，要求该文件导出的是一个easynode.framework.plugin.EasyNodePlugin类的子类\n     5. 实例化上一步骤的导出类，创建插件实例，并将读取的配置文件通过config和i18n函数配置\n     6. 注册插件到插件库，等待检查依赖关系后初始化\n     上述步骤完成后，开始插件启动流程，插件启动流程如下：\n     1. 调用插件实例的checkDependency函数\n     2. 调用插件的实例的initialize函数初始化插件，插件需要定义Action、路由、中间件均可以在此函数中实现，这是一个异步函数\n     3. 加载插件www目录到KOAHttpServer的Web目录，如果PluginLoadContext中定义了KOAHttpServer实例。\n</pre>",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "loadCtx",
                    "description": "加载上下文环境",
                    "type": "easynode.framework.plugin.PluginLoadContext"
                }
            ],
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 467,
            "description": "获取插件实例。",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "name",
                    "description": "插件名，可按$name@$version格式只传递一个name参数",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "插件最低版本，可不传",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/EasyNodePlugin.js",
            "line": 493,
            "description": "返回系统插件情况。",
            "itemtype": "method",
            "name": "plugins",
            "params": [
                {
                    "name": "detail",
                    "description": "是否获取详细信息，默认false。false时仅返回插件名列表，true时，返回插件的详细信息",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.EasyNodePlugin"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 16,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "opts",
                    "description": "选项，参考PluginLoadContext的成员。",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 28,
            "description": "数据源",
            "itemtype": "property",
            "name": "datasource",
            "type": "{easynode.framework.db.IDataSource}",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 39,
            "description": "数据库名",
            "itemtype": "property",
            "name": "database",
            "type": "{String}",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 50,
            "description": "缓存",
            "itemtype": "property",
            "name": "cache",
            "type": "{easynode.framework.cache.ICache}",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 61,
            "description": "队列实例",
            "itemtype": "property",
            "name": "mq",
            "type": "{easynode.framework.mq.IQueue}",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/plugin/PluginLoadContext.js",
            "line": 72,
            "description": "KOAHttpServer",
            "itemtype": "property",
            "name": "koaHttpServer",
            "type": "{easynode.framework.server.http.KOAHttpServer}",
            "default": "null",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.plugin.PluginLoadContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 28,
            "description": "koa中间件ctx。",
            "itemtype": "property",
            "name": "_action",
            "type": "ctx koa中间件ctx",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 41,
            "description": "session。",
            "itemtype": "property",
            "name": "session",
            "type": "{Object}",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 61,
            "description": "获取此上下文环境中指定名称的参数值。实现ActionContext的param函数。",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "默认值，默认为null",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 80,
            "description": "获取此上下文环境中是否传递了某个参数。",
            "itemtype": "method",
            "name": "hasParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否具有某个参数",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 94,
            "description": "获取此上下文环境中指所有的参数。",
            "itemtype": "method",
            "name": "params",
            "return": {
                "description": "json对象",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 106,
            "description": "设置参数值。",
            "itemtype": "method",
            "name": "setParam",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "参数值",
                    "type": "String"
                }
            ],
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAActionContext.js",
            "line": 121,
            "description": "根据Action的参数定义，转换参数值类型。",
            "itemtype": "method",
            "name": "_convertArgs",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAActionContext"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 20,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 36,
            "description": "增加路由。路由清单：<br>\n        <pre>\n              JSON API路由：                                  /json\n             RESTFUL API路由：                             /rest\n             UPLOAD FILE 路由：                           /upload\n        </pre>",
            "itemtype": "method",
            "name": "addRoutes",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 55,
            "description": "增加JSON API路由 /json。配置: easynode.servers.koa-HttpServer.routes.jsonAPI.uri指定一个不同的值。",
            "itemtype": "method",
            "name": "addJSONAPIRoute",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 79,
            "description": "增加Restful API路由 /rest。配置: easynode.servers.koa-HttpServer.routes.action.uri指定一个不同的值。",
            "itemtype": "method",
            "name": "addJSONAPIRoute",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 101,
            "description": "增加Restful API路由 /rest。配置: easynode.servers.koa-HttpServer.routes.upload.uri指定一个不同的值。\n<h5>可通过配置项：easynode.servers.koa-HttpServer.routes.upload.enabled=false关闭上传文件路由。</h5>",
            "itemtype": "method",
            "name": "addJSONAPIRoute",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 120,
            "description": "增加view路由 /v/$module/$action[.mst|.jade|.ejs]?_plugin_=xxx。\n$module，Action模块名\n$action，Action名\n.mst|.jade|.ejs，渲染模板，默认.mst\n_plugin_，插件名，如果指定，将使用插件下的view下的模板文件渲染",
            "itemtype": "method",
            "name": "addViewRoute",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 158,
            "description": "上传文件。",
            "itemtype": "method",
            "name": "_execUpload",
            "params": [
                {
                    "name": "ctx",
                    "description": "koa middleware ctx",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOADefaultRoutes.js",
            "line": 183,
            "description": "执行一个Action。",
            "itemtype": "method",
            "name": "_execAction",
            "params": [
                {
                    "name": "m",
                    "description": "模块名",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "Action名",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "执行Action选项",
                    "type": "Object"
                },
                {
                    "name": "ctx",
                    "description": "koa middleware ctx",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOADefaultRoutes"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 21,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 55,
            "description": "获取HTTP请求参数。注意：EasyNode使用'first'模式取query string参数，参数名相同时，先出现的值有效。",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "name",
                    "description": "参数名",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "从哪里取参数，枚举，可以为\"query\"(query string)，\"body“(http body, POST时有效)，\n     \"all\"(body或query,body优先)，默认”all“",
                    "type": "String"
                }
            ],
            "return": {
                "description": "参数值",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 103,
            "description": "获取此上下文环境中指所有的参数。",
            "itemtype": "method",
            "name": "params",
            "return": {
                "description": "json对象",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 119,
            "description": "获取HTTP请求参数名称。",
            "itemtype": "method",
            "name": "paramNames",
            "params": [
                {
                    "name": "where",
                    "description": "从哪里取参数名，枚举，可以为\"query\"(query string)，\"body“(http body, POST时有效)，\n     \"all\"(body或query,body优先)，默认”all“",
                    "type": "String"
                }
            ],
            "return": {
                "description": "参数名",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 168,
            "description": "获取上传的文件描述，POST且enctype=\"multipart-form-data\"时有效。没有指定参数名的文件时，返回null。",
            "itemtype": "method",
            "name": "file",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的文件描述。结构如下：\n                             {\n                                     field : 'file1',\n                                                        name : 'xx.jpg',\n                                                        mime : 'image/jpeg',\n                                                        path : '/tmp/adksl1234j123/xx.jpg'\n                             }",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 202,
            "description": "保存文件到上传目录。",
            "itemtype": "method",
            "name": "saveFile",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的文件描述。结构参考：file()函数。",
                "type": "Object"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpRequestParameter.js",
            "line": 261,
            "description": "枚举所有上传的文件参数名（字段名）。",
            "itemtype": "method",
            "name": "fileNames",
            "params": [
                {
                    "name": "name",
                    "description": "参数名（字段名）",
                    "type": "String"
                }
            ],
            "return": {
                "description": "上传的所有文件参数名（字段名）",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpRequestParameter"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 141,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "port",
                    "description": "端口，默认5000",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 153,
            "description": "HTTP服务的根目录，默认配置项：easynode.servers.koa-HttpServer.rootDirectory或www",
            "itemtype": "property",
            "name": "_webRoot",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 162,
            "description": "设置HTTP服务根目录。",
            "itemtype": "method",
            "name": "setWebRoot",
            "params": [
                {
                    "name": "webRoot",
                    "description": "HTTP服务根目录，相对路径",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 173,
            "description": "获取HTTP服务根目录。",
            "itemtype": "method",
            "name": "getWebRoot",
            "return": {
                "description": "返回HTTP服务根目录",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 184,
            "description": "上传文件目录，默认www/uploads",
            "itemtype": "property",
            "name": "_uploadDir",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 192,
            "description": "上传文件目录前缀，默认/uploads",
            "itemtype": "property",
            "name": "_uploadURIPrefix",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 200,
            "description": "设置文件上传目录。",
            "itemtype": "method",
            "name": "setUploadDir",
            "params": [
                {
                    "name": "uploadDir",
                    "description": "HTTP服务根目录，相对路径",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 210,
            "description": "获取HTTP服务上传目录。",
            "itemtype": "method",
            "name": "getUploadDir",
            "return": {
                "description": "返回HTTP服务上传目录",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 221,
            "description": "获取HTTP服务上伟目录相对路径",
            "itemtype": "method",
            "name": "getUploadURIPrefix",
            "return": {
                "description": "返回HTTP服务上传目录相对路径",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 233,
            "description": "设置服务是否记录访问日志",
            "itemtype": "method",
            "name": "writeAccessLog",
            "params": [
                {
                    "name": "flag",
                    "description": "是否记录访问日志",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 248,
            "description": "Session 存储类型，默认KOAHttpServer.SessionSupport.STORAGE_MEMORY",
            "itemtype": "property",
            "name": "_sessionStorage",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 255,
            "description": "Session 存储选项，默认null",
            "itemtype": "property",
            "name": "_sessionStorageOptions",
            "type": "object",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 263,
            "description": "koa app的key",
            "itemtype": "property",
            "name": "_keys",
            "type": "array",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 273,
            "description": "增加静态文件查找目录",
            "itemtype": "method",
            "name": "addWebDirs",
            "params": [
                {
                    "name": "arr",
                    "description": "静态文件列表，相对于EasyNode的目录。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 288,
            "description": "增加动态模板查找目录，仅允许一个目录",
            "itemtype": "method",
            "name": "addTemplateDirs",
            "params": [
                {
                    "name": "arr",
                    "description": "模板文件列表，相对于EasyNode的目录",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "autho": "allen.hu",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 304,
            "description": "设置koa的KEY",
            "itemtype": "method",
            "name": "setKeys",
            "params": [
                {
                    "name": "keys",
                    "description": "Key列表，每个KEY是string。",
                    "type": "..."
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 316,
            "description": "增加中间件，中间件是一个generator函数，请注意：中间件会按先后顺序添加到koa，具体流程请参考start函数。\n在任何中间件中可以访问koa ctx对象，即中间件generator函数中的this对象，的parameter对象，该成员是\neasynode.framework.server.http.KOAHttpRequestParameter类实例，用于获取HTTP请求参数和上传的文件。",
            "itemtype": "method",
            "name": "addMiddleware",
            "params": [
                {
                    "name": "gen",
                    "description": "generator函数，符合koa中间件规范",
                    "type": "Generator"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n\n    server.addMiddleware(function * (next) {\n             console.log('this message is printed anytime');\n             console.log(this.parameter.param('a'));\n             console.log(this.parameter.param('b'));\n             console.log(this.parameter.dateParam('c'));\n             yield next;\n     });"
            ],
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 340,
            "description": "增加中间件(在Routes之后)，中间件是一个generator函数，请注意：中间件会按先后顺序添加到koa，具体流程请参考start函数。\n在任何中间件中可以访问koa ctx对象，即中间件generator函数中的this对象，的parameter对象，该成员是\neasynode.framework.server.http.KOAHttpRequestParameter类实例，用于获取HTTP请求参数和上传的文件。",
            "itemtype": "method",
            "name": "addMiddlewareAfterRoutes",
            "params": [
                {
                    "name": "gen",
                    "description": "generator函数，符合koa中间件规范",
                    "type": "Generator"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n     server.addMiddlewareAfterRoutes(function * (next) {\n             console.log('this message is printed when no route was found');\n             this.type = 'json';\n             this.body = {\n                     hello : 'EasyNode'\n             };\n             yield next;\n     });"
            ],
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 364,
            "description": "增加一个路由。\n 在任何路由中可以访问koa ctx对象，即中间件generator函数中的this对象，的parameter对象，该成员是\neasynode.framework.server.http.KOAHttpRequestParameter类实例，用于获取HTTP请求参数和上传的文件。",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "method",
                    "description": "http method，支持\"all\", \"get\", \"post\", \"put\", \"delete\"",
                    "type": "String"
                },
                {
                    "name": "uri,",
                    "description": "以\"/\"开头",
                    "type": "String"
                },
                {
                    "name": "gen,",
                    "description": "路由generator函数",
                    "type": "Generator"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n    server.addRoute('get', '/abc.jsp', function * () {\n             this.body = 'This is abc.jsp';\n    });\n"
            ],
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 393,
            "description": "设置Session的存储类型，默认Session支持为内存存储，这容易引起内存泄漏，请不要用于生产环境。",
            "itemtype": "method",
            "name": "setSessionStorage",
            "params": [
                {
                    "name": "storage",
                    "description": "存储类型, KOAHttpServer.SessionSupport.STORAGE_*",
                    "type": "String"
                },
                {
                    "name": "opt",
                    "description": "参数，使用KOAHttpServer.SessionSupport.STORAGE_MEMORY时，忽略此参数。",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n    var KOAHttpServer = using('easynode.framework.server.http.KOAHttpServer');\n    var server = new KOAHttpServer();\n\n    //use memory session\n    server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMORY);\n\n    //use redis session storage\n    server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_REDIS, {\n            host : '127.0.0.1',\n            port : 6379,\n            db : 'EasyNode_Session',\n            pass : 'password_of_db'\n    });\n\n    //use memcached session storage\n    server.setSessionStorage(KOAHttpServer.SessionSupport.STORAGE_MEMCACHED, {\n            host : '127.0.0.1',\n            port : 11211\n    });"
            ],
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 433,
            "description": "设置HTTP Server是否启用CSRF防御。默认禁用。启用时需要koa-csrf模块支持。",
            "itemtype": "method",
            "name": "enableCSRF",
            "params": [
                {
                    "name": "flag",
                    "description": "true-启用；false-禁用。",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 446,
            "description": "设置HTTP Server是否启用404中间件。默认启用。可以通过addMiddlewareAfterRoutes函数自行增加一个404处理中间件，在这个\n中间件中不调用yield next中止downstream中间件可以达到同样的效果。KOAHttpServer的404中间件总是位于中间件最底端。",
            "itemtype": "method",
            "name": "enableCSRF",
            "params": [
                {
                    "name": "flag",
                    "description": "true-启用；false-禁用。",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 460,
            "description": "设置KOAActionContext的事件处理器。可在此注入数据库支持、缓存支持、队列支持等等。<br/>\n这是一个非常重要的函数，用于设置EasyNode中所有Action的调用上下文，包括数据库连接使用，cache使用，MQ使用\n等，这些对象的使用，EasyNode已经抽象出相应的接口。<br/>\nEasyNode的新版本可能会再抽象其他一些通用的功能接口",
            "itemtype": "method",
            "name": "setActionContextListener",
            "params": [
                {
                    "name": "@param",
                    "description": "l ActionContext事件监听器",
                    "type": "easynode.framework.mvc.IActionContextListener"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 475,
            "description": "返回session的storage对象，符合koa-generic-session接口定义。get、set、destroy。",
            "itemtype": "method",
            "name": "_getSessionStore",
            "return": {
                "description": "storage 存储对象。实现get、set、destroy接口。",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 506,
            "description": "session内存存储",
            "itemtype": "method",
            "name": "_createMemoryStorage",
            "return": {
                "description": "session内存存储对象。实现get、set、destroy接口。",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 520,
            "description": "session redis存储",
            "itemtype": "method",
            "name": "_createRedisStorage",
            "return": {
                "description": "session redis存储对象。koa-redis模块支持。",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 534,
            "description": "session memcached存储",
            "itemtype": "method",
            "name": "_createMemcachedStorage",
            "return": {
                "description": "session memcached存储对象。koa-memcached模块支持。",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 548,
            "description": "写AccessLog的中间件。\n如果需要记录会话用户，则需要在后续中间件或者route或action中设置session.user.id至koa context",
            "itemtype": "method",
            "name": "_createAccessLogger",
            "return": {
                "description": "符合koa中间件规范的AccessLog的generator对象。",
                "type": "Generator"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 587,
            "description": "默认Routes。",
            "itemtype": "method",
            "name": "_createDefaultRoutes",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 601,
            "description": "增加用户定义的Routes(通过addRoute函数)。",
            "itemtype": "method",
            "name": "_createDefaultRoutes",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 622,
            "description": "增加用户定义的Middleware(通过addMiddleware函数)。",
            "itemtype": "method",
            "name": "_createExtraMiddlewares",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 638,
            "description": "加载默认中间件。",
            "itemtype": "method",
            "name": "_createDefaultMiddlewares",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 659,
            "description": "增加multipart-form-data支持。",
            "itemtype": "method",
            "name": "_createMultipartMiddleware",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 721,
            "description": "增加在Route之后的middleware, 通过addMiddlewareAfterRoutes",
            "itemtype": "method",
            "name": "_createMiddlewaresAfterRoutes",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 736,
            "description": "增加用户定义的静态文件目录(通过addWebDirs函数)。",
            "itemtype": "method",
            "name": "_addExtraWebDirs",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 752,
            "description": "增加用户定义的模板文件目录(通过addTemplateDirs函数)。",
            "itemtype": "method",
            "name": "_addTemplate",
            "params": [
                {
                    "name": "app",
                    "description": "koa实例",
                    "type": "Koa"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 774,
            "description": "启动KOAHttpServer并加载中间件，中间件会按先后顺序添加到koa，具体流程如下：<br>\n         favicon->access log->static files(包括所有静态文件目录)->session->csrf->$middlewares->default routes->$extra routes->$middleware-after-routes",
            "itemtype": "method",
            "name": "start",
            "overwrite": "",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 787,
            "description": "koa Application实例",
            "itemtype": "property",
            "name": "_app",
            "type": "{koa.Application}",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 933,
            "description": "获取客户端连接列表。KOAHttpServer只返回一个空的数组。",
            "itemtype": "method",
            "name": "connections",
            "abstract": "",
            "return": {
                "description": "客户端连接列表，每个客户端连接应至少包含一个token字标用于唯一标识一个客户端连接",
                "type": "Array"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 947,
            "description": "向客户端发送消息。HTTP服务不支持主动向客户端发送消息，仅抛出错误。",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "clientTokens",
                    "description": "客户端Token列表，客户端Token可以唯一识别一个客户端。传递Array时，\n                                     向多个客户端发送消息",
                    "type": "Array/String"
                },
                {
                    "name": "msg",
                    "description": "消息体",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "客户端列表",
                "type": "Array"
            },
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 964,
            "description": "向所有客户端广播消息。HTTP服务不支持主动向客户端发送消息，仅抛出错误。",
            "itemtype": "method",
            "name": "broadcast",
            "params": [
                {
                    "name": "msg",
                    "description": "消息体",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "客户端列表",
                "type": "Array"
            },
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAHttpServer.js",
            "line": 1023,
            "description": "用户访问动态内容时触发。",
            "itemtype": "event",
            "name": "access",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.http.KOAHttpServer.SessionSupport"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.KOAMemorySessionStorage"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "line": 31,
            "description": "get函数，获取一个session。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sid",
                    "description": "session id",
                    "type": "String"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.KOAMemorySessionStorage"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "line": 46,
            "description": "set函数，获取一个session。",
            "itemtype": "method",
            "name": "set",
            "async": 1,
            "params": [
                {
                    "name": "sid",
                    "description": "session id",
                    "type": "String"
                },
                {
                    "name": "sess",
                    "description": "session 对象",
                    "type": "Object"
                },
                {
                    "name": "ttl,",
                    "description": "超时时间：NOTE : 不支持",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.KOAMemorySessionStorage"
        },
        {
            "file": "../src/easynode/framework/server/http/KOAMemorySessionStorage.js",
            "line": 63,
            "description": "destroy函数，销毁一个session。",
            "itemtype": "method",
            "name": "destroy",
            "async": 1,
            "params": [
                {
                    "name": "sid",
                    "description": "session id",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.KOAMemorySessionStorage"
        },
        {
            "file": "../src/easynode/framework/server/tcp/protocols/JSONDecoder.js",
            "line": 16,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.protocols.JSONDecoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/protocols/JSONEncoder.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.protocols.JSONEncoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/protocols/JSONMessageHandler.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.protocols.JSONMessageHandler"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Decoder.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Decoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Decoder.js",
            "line": 28,
            "description": "开始decode client消息。解析出有效消息后触发事件：TCPClient.EVENT_MESSAGE_DECODED",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "client",
                    "description": "客户端实例",
                    "type": "easynode.framework.server.tcp.TCPClient"
                }
            ],
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Decoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Encoder.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Encoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Encoder.js",
            "line": 28,
            "description": "对消息进行编码",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "原始消息对象",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "client",
                    "description": "客户端实例",
                    "type": "easynode.framework.server.tcp.TCPClient"
                }
            ],
            "return": {
                "description": "二进制Buffer，取决于socket的Encoding。",
                "type": "Buffer/String"
            },
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Encoder"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Message.js",
            "line": 16,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Message"
        },
        {
            "file": "../src/easynode/framework/server/tcp/Message.js",
            "line": 28,
            "description": "从消息结构数组创建消息JSON对象。\n//结构示范：\nreturn [\n                'startFlag:BYTE',\n                'frameLen:WORD',\n                'sumCheck:WORD',\n                'msgId:WORD',\n                'msgVersion:BYTE',\n                'encrypt:BYTE',\n                'IMEI:STRING:16',\n                '$dynamic:getBodyStruct',\n                'bitField:BIT:BIT($msgId,1)',\n                'bitField2:BIT:BIT($msgId,1,2)',\n                'endFlag:BYTE',\n                'dynamicLen:BYTES:LENGTH($frameLen)'\n                ];",
            "itemtype": "method",
            "name": "createFromStructDescription",
            "params": [
                {
                    "name": "dynamicSrc",
                    "description": "dynamic执行时的源对象",
                    "type": "Object"
                },
                {
                    "name": "struct",
                    "description": "消息结构数组",
                    "type": "Array"
                },
                {
                    "name": "dynamic",
                    "description": "动态参数处理器",
                    "type": "Object"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.Message"
        },
        {
            "file": "../src/easynode/framework/server/tcp/MessageHandler.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.MessageHandler"
        },
        {
            "file": "../src/easynode/framework/server/tcp/MessageHandler.js",
            "line": 28,
            "description": "处理消息",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "msg",
                    "description": "decoder触发的TCPClient.EVENT_MESSAGE_DECODED事件的参数",
                    "type": "Object"
                },
                {
                    "name": "client",
                    "description": "客户端实例",
                    "type": "easynode.framework.server.tcp.TCPClient"
                }
            ],
            "return": {
                "description": "响应消息，当类型是Array时表示多条响应消息，这些消息会自动经encoder后发送至客户端",
                "type": "Object/Array"
            },
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.MessageHandler"
        },
        {
            "file": "../src/easynode/framework/server/tcp/StreamDecoderHelper.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.StreamDecoderHelper"
        },
        {
            "file": "../src/easynode/framework/server/tcp/StreamDecoderHelper.js",
            "line": 29,
            "description": "根据字符串描述的报文结构解析报文。",
            "itemtype": "method",
            "name": "decodeByStructDescription",
            "params": [
                {
                    "name": "buf",
                    "description": "输入Buffer，IN | OUT，正确解析时输入Buffer将被”消费“相应消息内容。",
                    "type": "Buffer"
                },
                {
                    "name": "bufLen",
                    "description": "输入Buffer的长度, in bytes",
                    "type": "Int"
                },
                {
                    "name": "struct",
                    "description": "报文结构描述，字符串数组。",
                    "type": "Array"
                },
                {
                    "name": "dynamic",
                    "description": "动态参数处理函数容器",
                    "type": "Object"
                },
                {
                    "name": "endian",
                    "description": "字节序：BE/LE。BE->big endian, LE->little endian",
                    "type": "String"
                },
                {
                    "name": "encodingConverter",
                    "description": "字符集转换器，如果为null则视为utf8字符集，否则请传递iconv字符集转换实例new Iconv('src', 'dest')",
                    "type": "Iconv"
                },
                {
                    "name": "validator",
                    "description": "报文验证器，具有一个成员：validate : function(msg) {return true/false;}，如果验证失败，本函数将返回truncated Buffer",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回正确解析的消息结构、偏移量（消息总字节数），正确解析时输入Buffer将被”消费“相应消息内容。",
                "type": "Object"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.StreamDecoderHelper"
        },
        {
            "file": "../src/easynode/framework/server/tcp/StreamEncoderHelper.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.StreamEncoderHelper"
        },
        {
            "file": "../src/easynode/framework/server/tcp/StreamEncoderHelper.js",
            "line": 30,
            "description": "根据字符串描述的报文结构解析报文。",
            "itemtype": "method",
            "name": "encodeByStructDescription",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.StreamEncoderHelper"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "socket",
                    "description": "网络套接字",
                    "type": "Socket"
                },
                {
                    "name": "clientId",
                    "description": "客户端连接UUID",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 28,
            "description": "网络套接字",
            "itemtype": "property",
            "name": "socket",
            "type": "Socket Node.js plain socket object",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 38,
            "description": "TCPServer实例",
            "itemtype": "property",
            "name": "server",
            "type": "easynode.framework.server.tcp.TCPServer",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 48,
            "description": "创建时间",
            "itemtype": "property",
            "name": "_uptime",
            "type": "Date",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 58,
            "description": "是否处于连接状态",
            "itemtype": "property",
            "name": "_connected",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 68,
            "description": "客户端别名",
            "itemtype": "property",
            "name": "_alias",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 79,
            "description": "获取客户端连接时长(单位：ms)。",
            "itemtype": "method",
            "name": "uptime",
            "return": {
                "description": "客户端连接时长(单位：ms)",
                "type": "Int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 91,
            "description": "获取原生Socket连接。",
            "itemtype": "method",
            "name": "getSocket",
            "return": {
                "description": "Socket连接",
                "type": "Socket"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 103,
            "description": "获取客户端ID，返回：this.socket.SOCKET_ID",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "客户端ID",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 115,
            "description": "设置客户端别名",
            "itemtype": "method",
            "name": "setAlias",
            "params": [
                {
                    "name": "alias",
                    "description": "客户端别名",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 127,
            "description": "设置客户端别名",
            "itemtype": "method",
            "name": "getAlias",
            "return": {
                "description": "客户端别名",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 139,
            "description": "获取客户端Socket ID，返回：this.socket.SOCKET_ID",
            "itemtype": "method",
            "name": "getClientId",
            "return": {
                "description": "客户端ID",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 151,
            "description": "客户端是否已经连接成功",
            "itemtype": "method",
            "name": "uptime",
            "return": {
                "description": "客户端是否已经连接成功",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 163,
            "description": "发送一条消息",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "msg",
                    "description": "要发送的消息，该消息会经过Encoder编码",
                    "type": "Object"
                }
            ],
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPClient.js",
            "line": 184,
            "description": "消息decode后触发。",
            "itemtype": "event",
            "name": "message-decoded",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPClient"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 23,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "params": [
                {
                    "name": "decoder",
                    "description": "解码器, Optional",
                    "type": "easynode.framework.server.tcp.ITCPDecoder"
                },
                {
                    "name": "encoder",
                    "description": "编码器, Optional",
                    "type": "easynode.framework.server.tcp.ITCPEncoder"
                },
                {
                    "name": "messageHandler",
                    "description": "消息处理器, Optional",
                    "type": "easynode.framework.server.tcp.IMessageHandler"
                },
                {
                    "name": "port",
                    "description": "TCP监听端口，默认6000，配置项：easynode.servers.tcpServer.port, Optional",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 42,
            "description": "客户端连接map，session id -> easynode.framework.server.tcp.TCPClient",
            "itemtype": "property",
            "name": "_clients",
            "type": "Map(String -> easynode.framework.server.tcp.TCPClient)",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 53,
            "description": "客户端别名，alias -> easynode.framework.server.tcp.TCPClient",
            "itemtype": "property",
            "name": "_clientAlias",
            "type": "Map(String -> easynode.framework.server.tcp.TCPClient)",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 63,
            "description": "客户端连接数",
            "itemtype": "property",
            "name": "_clientsCount",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 73,
            "description": "Decoder",
            "itemtype": "property",
            "name": "_decoder",
            "type": "easynode.framework.server.tcp.ITCPDecoder",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 83,
            "description": "Encoder",
            "itemtype": "property",
            "name": "_encoder",
            "type": "easynode.framework.server.tcp.ITCPEncoder",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 93,
            "description": "MessageHandler, 处理Decoder解码过的消息",
            "itemtype": "property",
            "name": "_messageHandler",
            "type": "easynode.framework.server.tcp.IMessageHandler",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 103,
            "description": "指示TCP服务是否已经启动。",
            "itemtype": "property",
            "name": "_isRunning",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 113,
            "description": "客户端工厂类。",
            "itemtype": "property",
            "name": "_clientFactory",
            "type": "class",
            "default": "easynode.framework.server.tcp.TCPClient",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 124,
            "description": "net.Server实例。",
            "itemtype": "property",
            "name": "_server",
            "type": "net.Server",
            "default": "null",
            "access": "private",
            "tagname": "*",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 135,
            "description": "设置decoder。",
            "itemtype": "method",
            "name": "setDecoder",
            "params": [
                {
                    "name": "decoder",
                    "description": "解码器",
                    "type": "easynode.framework.server.tcp.ITCPDecoder"
                }
            ],
            "return": {
                "description": "this　可链式调用"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 150,
            "description": "设置encoder。",
            "itemtype": "method",
            "name": "setEncoder",
            "params": [
                {
                    "name": "encoder",
                    "description": "编码器",
                    "type": "easynode.framework.server.tcp.ITCPEncoder"
                }
            ],
            "return": {
                "description": "this　可链式调用"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 165,
            "description": "设置消息处理器。",
            "itemtype": "method",
            "name": "setEncoder",
            "params": [
                {
                    "name": "messageHandler",
                    "description": "消息处理器",
                    "type": "easynode.framework.server.tcp.IMessageHandler"
                }
            ],
            "return": {
                "description": "this　可链式调用"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 180,
            "description": "设置client实例工厂。",
            "itemtype": "method",
            "name": "setClientFactory",
            "params": [
                {
                    "name": "namespace",
                    "description": "客户端工厂全类名或客户端工厂类。该类要求继承于easynode.framework.server.tcp.TCPServer",
                    "type": "String/class"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 200,
            "description": "包装Socket。",
            "itemtype": "method",
            "name": "_encapsulateSocket",
            "params": [
                {
                    "name": "socket",
                    "description": "Socket实例",
                    "type": "Socket"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 227,
            "description": "网络连接事件处理函数。",
            "itemtype": "method",
            "name": "_onClientConnect",
            "params": [
                {
                    "name": "socket",
                    "description": "Socket实例",
                    "type": "Socket"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 283,
            "description": "设置客户端别名。",
            "itemtype": "method",
            "name": "setClientAlias",
            "params": [
                {
                    "name": "alias",
                    "description": "客户端别名",
                    "type": "String"
                },
                {
                    "name": "client",
                    "description": "客户端实例，具体类型取决于ClientFactory",
                    "type": "easynode.framework.server.tcp.TCPClient"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 301,
            "description": "根据客户端别名查找客户端实例",
            "itemtype": "method",
            "name": "getClientByAlias",
            "params": [
                {
                    "name": "alias",
                    "description": "客户端别名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "客户端实例，具体类型取决于ClientFactory",
                "type": "easynode.framework.server.tcp.TCPClient"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 314,
            "description": "获取当前的客户端连接总数。",
            "itemtype": "method",
            "name": "getClientsCount",
            "return": {
                "description": "客户端总数",
                "type": "Int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/tcp/TCPServer.js",
            "line": 326,
            "description": "断开连接。",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "socketId",
                    "description": "client.getId()或client.getSocketId()或socket.SOCKET_ID",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "断开原因",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.tcp.TCPServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "服务名称",
                    "type": "String"
                },
                {
                    "name": "port",
                    "description": "服务端口",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 34,
            "description": "服务类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 44,
            "description": "服务端口",
            "itemtype": "property",
            "name": "port",
            "type": "int",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 54,
            "description": "服务名称",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 64,
            "description": "服务ID，从EasyNode官方网站获取，配置项：easynode.app.id",
            "itemtype": "property",
            "name": "appId",
            "type": "String",
            "default": "\"UNTITLED\"",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 75,
            "description": "应用密钥。配置项：easynode.app.key",
            "itemtype": "property",
            "name": "appKey",
            "type": "String",
            "default": "\"EMPTY\"",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 87,
            "description": "服务是否已经处于启动状态",
            "itemtype": "property",
            "name": "_started",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 103,
            "description": "获取服务是否已经启动。",
            "itemtype": "method",
            "name": "isStarted",
            "return": {
                "description": "服务是否已经启动",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 115,
            "description": "服务是否处于暂停状态",
            "itemtype": "property",
            "name": "_paused",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 131,
            "description": "获取服务是否处于暂停状态",
            "itemtype": "method",
            "name": "isPausing",
            "return": {
                "description": "服务是否处于暂停状态",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 144,
            "description": "设置应用ID和密钥。",
            "itemtype": "method",
            "name": "setAppInfo",
            "params": [
                {
                    "name": "appId",
                    "description": "应用ID",
                    "type": "String"
                },
                {
                    "name": "appKey",
                    "description": "应用密钥",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 162,
            "description": "设置服务的ActionContext监听器，用于向服务的ActionContext注入Action执行时必要成员。",
            "itemtype": "method",
            "name": "setActionContextListener",
            "params": [
                {
                    "name": "l",
                    "description": "ActionContext事件监听器",
                    "type": "easynode.framework.mvc.IActionContextListener"
                }
            ],
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 175,
            "description": "设置服务端口。",
            "itemtype": "method",
            "name": "setPort",
            "params": [
                {
                    "name": "port",
                    "description": "服务端口。",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "abstract": "",
            "async": 1,
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 191,
            "description": "启动服务。子类实现时，请触发其started事件。",
            "itemtype": "method",
            "name": "start",
            "since": "0.1.0",
            "author": "zlbbq",
            "abstract": "",
            "async": 1,
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 204,
            "description": "停止服务。停止服务时，服务占用的网络端口将一并释放。子类实现时，请触发stop事件",
            "itemtype": "method",
            "name": "stop",
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 217,
            "description": "立即暂停服务。与停止服务不同，暂停服务并不释放网络端口资源，也不丢弃网络数据包，仅无响应或响应服务暂停。\n子类实现时，请触发pause事件",
            "itemtype": "method",
            "name": "pause",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 230,
            "description": "立即恢复服务，如果服务处于暂停状态。子类实现时，请触发resume事件。",
            "itemtype": "method",
            "name": "resume",
            "abstract": "",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 242,
            "description": "统计服务状态。",
            "itemtype": "method",
            "name": "stat",
            "abstract": "",
            "return": {
                "description": "服务状态描述",
                "type": "easynode.framework.server.ServerStat"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 256,
            "description": "获取客户端连接列表。",
            "itemtype": "method",
            "name": "connections",
            "abstract": "",
            "return": {
                "description": "客户端连接列表，每个客户端连接应至少包含一个token字标用于唯一标识一个客户端连接",
                "type": "Array"
            },
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 270,
            "description": "向客户端发送消息。",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "clientTokens",
                    "description": "客户端Token列表，客户端Token可以唯一识别一个客户端。传递Array时，\n                                     向多个客户端发送消息",
                    "type": "Array/String"
                },
                {
                    "name": "msg",
                    "description": "消息体",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "客户端列表",
                "type": "Array"
            },
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 287,
            "description": "向所有客户端广播消息。",
            "itemtype": "method",
            "name": "broadcast",
            "params": [
                {
                    "name": "msg",
                    "description": "消息体",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "客户端列表",
                "type": "Array"
            },
            "abstract": "",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 302,
            "description": "判定服务器是否处于运行状态",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "服务是否处于运行状态",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 315,
            "description": "服务开始启动前触发。",
            "itemtype": "event",
            "name": "before-start",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 322,
            "description": "服务启动后触发。",
            "itemtype": "event",
            "name": "started",
            "params": [
                {
                    "name": "err",
                    "description": "启动时发生的错误，没有错误为null。",
                    "type": "Error"
                },
                {
                    "name": "result",
                    "description": "启动结果，发生错误时为null，否则为true.",
                    "type": "Boolean"
                }
            ],
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 331,
            "description": "服务开始停止前触发。",
            "itemtype": "event",
            "name": "before-stop",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 338,
            "description": "停止后触发。",
            "itemtype": "event",
            "name": "stop",
            "params": [
                {
                    "name": "err",
                    "description": "停止时发生的错误，没有错误为null。",
                    "type": "Error"
                },
                {
                    "name": "result",
                    "description": "停止结果，发生错误时为null，否则为true.",
                    "type": "Boolean"
                }
            ],
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 347,
            "description": "服务暂停时触发。",
            "itemtype": "event",
            "name": "before-start",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/AbstractServer.js",
            "line": 354,
            "description": "服务从暂停状态恢复时触发。",
            "itemtype": "event",
            "name": "resume",
            "class": "easynode.framework.server.AbstractServer"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 14,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 25,
            "description": "服务启动时间, 毫秒数",
            "itemtype": "property",
            "name": "uptime",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 32,
            "description": "当前连接数",
            "itemtype": "property",
            "name": "connections",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 39,
            "description": "服务自启动以来的连接数",
            "itemtype": "property",
            "name": "totalSessions",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 46,
            "description": "服务自启动以来的总事务数",
            "itemtype": "property",
            "name": "transactions",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 53,
            "description": "事务的最大耗时",
            "itemtype": "property",
            "name": "maxCost",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 60,
            "description": "事务的最小耗时",
            "itemtype": "property",
            "name": "maxCost",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/server/ServerStat.js",
            "line": 67,
            "description": "事务总耗时",
            "itemtype": "property",
            "name": "totalCost",
            "type": "int",
            "class": "easynode.framework.server.ServerStat"
        },
        {
            "file": "../src/easynode/framework/test/TestCase.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.test.TestCase"
        },
        {
            "file": "../src/easynode/framework/test/TestCase.js",
            "line": 27,
            "description": "启动测试案例，子类需要实现start函数，注意：它是一个异步函数，需要返回一个generator函数的高阶函数。",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.test.TestCase"
        },
        {
            "file": "../src/easynode/framework/test/TestCaseRunner.js",
            "line": 16,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.test.TestCaseRunner"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 27,
            "description": "双字节，Big Endian转Little Endian",
            "itemtype": "method",
            "name": "wordBE2LE",
            "params": [
                {
                    "name": "wordBE",
                    "description": "双字节 - Big Endian",
                    "type": "WORD"
                }
            ],
            "return": {
                "description": "Little Endian",
                "type": "WORD"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 42,
            "description": "双字节，Little Endian转Big Endian",
            "itemtype": "method",
            "name": "wordLE2BE",
            "params": [
                {
                    "name": "wordLE",
                    "description": "双字节 - Little Endian",
                    "type": "WORD"
                }
            ],
            "return": {
                "description": "Big Endian",
                "type": "WORD"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 57,
            "description": "四字节，Big Endian转Little Endian",
            "itemtype": "method",
            "name": "dwordBE2LE",
            "params": [
                {
                    "name": "dwordBE",
                    "description": "四字节 - Big Endian",
                    "type": "DWORD"
                }
            ],
            "return": {
                "description": "Little Endian",
                "type": "DWORD"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 74,
            "description": "四字节，Little Endian转Big Endian",
            "itemtype": "method",
            "name": "dwordLE2BE",
            "params": [
                {
                    "name": "dwordLE",
                    "description": "四字节 - Little Endian",
                    "type": "DWORD"
                }
            ],
            "return": {
                "description": "Big Endian",
                "type": "DWORD"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 91,
            "description": "返回指定字节的第pos位是0还是1。",
            "itemtype": "method",
            "name": "bit",
            "params": [
                {
                    "name": "number",
                    "description": "数值",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "第x位，1 - 32",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "0/1",
                "type": "Int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 105,
            "description": "返回指定字节的第posStart位至posEnd的数值。\n0x67 = 01100111;\nbits(0x67, 3, 5) => 100 => 4",
            "itemtype": "method",
            "name": "bit",
            "params": [
                {
                    "name": "number",
                    "description": "数值",
                    "type": "Number"
                },
                {
                    "name": "posStart",
                    "description": "起始位置，1 - 32, include",
                    "type": "Int"
                },
                {
                    "name": "posEnd",
                    "description": "结束位置，1 - 32, include",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "数值, 100返回4, 010返回2.",
                "type": "Int"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 141,
            "description": "返回指定字节的第posStart位至posEnd的数值。\n0x67 = 01100111;\nbits(0x67, 3, 5) => 100 => 4",
            "itemtype": "method",
            "name": "writeBuffer2Array",
            "params": [
                {
                    "name": "buffer",
                    "description": "缓冲区",
                    "type": "Buffer"
                },
                {
                    "name": "length",
                    "description": "长度",
                    "type": "Int"
                },
                {
                    "name": "array",
                    "description": "数组",
                    "type": "Array"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 159,
            "description": "返回表示一个日期的byte数组[年,月,日]。日期年份 = 实际年份  - 2000",
            "itemtype": "method",
            "name": "date2Bytes",
            "params": [
                {
                    "name": "d",
                    "description": "日期，不传时使用系统当前时间",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "[年,月,日]  例：[0x0F, 0x05, 0x03] 表示 2015年5月3日",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/Binary.js",
            "line": 175,
            "description": "返回表示一个日期时间的byte数组[年,月,日,时,分,秒]。日期年份 = 实际年份  - 2000",
            "itemtype": "method",
            "name": "datetime2Bytes",
            "params": [
                {
                    "name": "d",
                    "description": "日期，不传时使用系统当前时间",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "[年,月,日]  例：[0x0F, 0x05, 0x03, 0x10, 0x00, 0x00] 表示 2015年5月3日 16:00:00",
                "type": "Array"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.Binary"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 30,
            "description": "交互稿项目管理文件，默认配置项：id.manager.project.filename",
            "itemtype": "property",
            "name": "_projectFileName",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 39,
            "description": "设置交互稿管理文件。",
            "itemtype": "method",
            "name": "setProjectFileName",
            "params": [
                {
                    "name": "projectFileName",
                    "description": "交互稿管理文件，相对路径",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 50,
            "description": "获取交互稿管理文件。",
            "itemtype": "method",
            "name": "getProjectFileName",
            "return": {
                "description": "返回交互稿管理文件",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 61,
            "description": "项目管理对象",
            "itemtype": "property",
            "name": "_projectsMap",
            "type": "Map {key=name,value=versions:[]}",
            "access": "private",
            "tagname": "",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 70,
            "description": "返回项目管理对像",
            "itemtype": "method",
            "name": "getProjectsMap",
            "return": {
                "description": "返回项目管理对象",
                "type": "Map"
            },
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/FileService.js",
            "line": 83,
            "description": "增加一个项目,项目存储结构为[{name:'',all:[{version1},{version2}]}]",
            "itemtype": "method",
            "name": "addProject",
            "params": [
                {
                    "name": "{name:'',version:{}}",
                    "description": "",
                    "type": "Project"
                }
            ],
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "#NAMESPACE#.FileService"
        },
        {
            "file": "../src/easynode/framework/util/HTTPUtil.js",
            "line": 20,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.HTTPUtil"
        },
        {
            "file": "../src/easynode/framework/util/HTTPUtil.js",
            "line": 72,
            "description": "请求JSON接口。",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "url",
                    "description": "请求URL",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "超时时间(ms)，默认3秒",
                    "type": "Int"
                },
                {
                    "name": "method",
                    "description": "HTTP Method，默认GET",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "请求参数",
                    "type": "Object"
                },
                {
                    "name": "encoding",
                    "description": "字符集，默认utf8",
                    "type": "String"
                },
                {
                    "name": "headers",
                    "description": "HTTP请求头",
                    "type": "Object"
                },
                {
                    "name": "agent",
                    "description": "HTTP agent，默认false，不使用node.js的连接池",
                    "type": "Object/boolean"
                }
            ],
            "return": {
                "description": "远程HTTP接口响应的JSON对象",
                "type": "Object"
            },
            "async": 1,
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.HTTPUtil"
        },
        {
            "file": "../src/easynode/framework/util/MustacheHelper.js",
            "line": 17,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.MustacheHelper"
        },
        {
            "file": "../src/easynode/framework/util/MustacheHelper.js",
            "line": 29,
            "description": "标准化Mustache render对象。",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "o",
                    "description": "准备渲染的对象。",
                    "type": "Object"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.MustacheHelper"
        },
        {
            "file": "../src/easynode/framework/util/MustacheHelper.js",
            "line": 360,
            "description": "渲染Mustache模板",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "template",
                    "description": "模板String",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "准备渲染的对象。",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "渲染结果",
                "type": "String"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.MustacheHelper"
        },
        {
            "file": "../src/easynode/framework/util/MustacheHelper.js",
            "line": 376,
            "description": "渲染Mustache模板",
            "itemtype": "method",
            "name": "renderFile",
            "params": [
                {
                    "name": "file",
                    "description": "文件路径",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "准备渲染的对象。",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "渲染结果",
                "type": "String"
            },
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.MustacheHelper"
        },
        {
            "file": "../src/easynode/framework/util/MyError.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "allen.hu",
            "class": "easynode.framework.util.MyError"
        },
        {
            "file": "../src/easynode/framework/util/MyError2.js",
            "line": 1,
            "description": "Created by hujiabao on 8/19/15.",
            "class": "easynode.framework.util.ObjectWrapper"
        },
        {
            "file": "../src/easynode/framework/util/ObjectWrapper.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.ObjectWrapper"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 30,
            "description": "替换mysql的SQL参数。参数格式：<br/>\n     var sql = SELECT * FROM DUAL WHERE A = #a# AND B in $b$ <br/>\n     #a# 转义字符串，$b$非转义字符串<br/>\n     SqlUtil.replaceMysqlArgs(sql, {a : 'value of a', b : '(1, 2)'});<br/>\n     // 等同于<br/>\n     SqlUtil.replaceMysqlArgs(sql, ['value of a', '(1, 2)']);<br/>\n     请注意，使用非转义字符串时要注意SQL注入攻击。",
            "itemtype": "method",
            "name": "replaceMysqlArgs",
            "params": [
                {
                    "name": "sql",
                    "description": "SQL语句",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "参数，为Object类型时，按名称替换，为Array类型时，逐个替换",
                    "type": "Object/Array"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 108,
            "description": "映射对象，将数据库列为照射为驼峰名，例：\n\n// 示例\n<pre>\n{\n     FIELD_NAME_A : 'a',\n     FIELD_B : 1\n}\n自动照射的结果为：\n{\n     fieldNameA : 'a',\n     fieldB : 1\n}\n</pre>",
            "itemtype": "method",
            "name": "mapEntity",
            "params": [
                {
                    "name": "o",
                    "description": "对象，通常是数据库的查询结果行",
                    "type": "Object"
                },
                {
                    "name": "mapper",
                    "description": "属性对照表, 为null时自动映射",
                    "type": "Object"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 154,
            "description": "获取数据库列的驼峰别名。COLUMN_NAME_A => columnNameA",
            "itemtype": "method",
            "name": "alias",
            "params": [
                {
                    "name": "columnName",
                    "description": "列名",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 174,
            "description": "获取数据库驼峰别的数据库列名。columnNameA => COLUMN_NAME_A。alias函数的反向转换函数。应用中如果\n不是按照_命名规则，可覆盖alias函数和aliasReverse函数。",
            "itemtype": "method",
            "name": "aliasReverse",
            "params": [
                {
                    "name": "fieldName",
                    "description": "列别名",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 198,
            "description": "计算结果集页数。",
            "itemtype": "method",
            "name": "calculatePages",
            "params": [
                {
                    "name": "rows",
                    "description": "结果集行数",
                    "type": "Int"
                },
                {
                    "name": "paging",
                    "description": "分页对象，Notation : {page : 1, rpp : 20}",
                    "type": "Object"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/SqlUtil.js",
            "line": 221,
            "description": "将分页对象转成Mysql LIMIT子句。",
            "itemtype": "method",
            "name": "pagingToLimit",
            "params": [
                {
                    "name": "paging",
                    "description": "分页对象，Notation : {page : 1, rpp : 20}",
                    "type": "Object"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.SqlUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 18,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 30,
            "description": "格式化字符串，将字符串中的占位符按顺序或按名称替换成实际字符串。占位符格式：{{xxx}}。",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "replaces",
                    "description": "替换参数，可以为数组，如果为数组则逐个替换，如果为对象则按名称替换。",
                    "type": "..."
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 74,
            "description": "2字节short转HEX String",
            "itemtype": "method",
            "name": "short2Hex",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Short"
                }
            ],
            "return": {
                "description": "hex code, 不含0x",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 89,
            "description": "1字节byte转HEX String",
            "itemtype": "method",
            "name": "short2Hex",
            "params": [
                {
                    "name": "b",
                    "description": "",
                    "type": "Byte"
                }
            ],
            "return": {
                "description": "hex code, 不含0x",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 110,
            "description": "4字节int转HEX String",
            "itemtype": "method",
            "name": "short2Hex",
            "params": [
                {
                    "name": "i",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "hex code, 不含0x",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 132,
            "description": "返回开关状态",
            "itemtype": "method",
            "name": "switchState",
            "params": [
                {
                    "name": "sw",
                    "description": "状态",
                    "type": "Int/boolean/String"
                }
            ],
            "return": {
                "description": "开关状态，int型时，1返回true, 非1返回false，boolean型时直接返回，字符串型\n                                     '1','true','on','yes'返回true，其他返回false",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/StringUtil.js",
            "line": 169,
            "description": "是否为局域网IP，局域网IP包括：192网段，172网段和10网段，127本地地址也视为局域网地址",
            "itemtype": "method",
            "name": "isIntranet",
            "params": [
                {
                    "name": "ip",
                    "description": "IP地址",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否为局域网IP地址",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.StringUtil"
        },
        {
            "file": "../src/easynode/framework/util/VersionComparator.js",
            "line": 15,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.VersionComparator"
        },
        {
            "file": "../src/easynode/framework/util/VersionComparator.js",
            "line": 27,
            "description": "比较两个版本。v1 > v2 返回>0的整数，v1 = v2返回０，v1 < v2返回<０的整数。注意：1.0 = 0.1.0，你懂的",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "v1",
                    "description": "版本号, 格式：major.minor.patch",
                    "type": "String"
                },
                {
                    "name": "v2",
                    "description": "版本号, 格式：major.minor.patch",
                    "type": "String"
                }
            ],
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.util.VersionComparator"
        },
        {
            "file": "../src/easynode/framework/BeanFactory.js",
            "line": 25,
            "description": "构造函数。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.BeanFactory"
        },
        {
            "file": "../src/easynode/framework/BeanFactory.js",
            "line": 37,
            "description": "初始化BeanFactory。逐个读取参数中的文件，根据参数中的文件描述创建BeanFactory，实现IoC。这些文件应当是标准的JSON数据格式。",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "async": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n     yield BeanFactory.initialize('etc/beans/demo-easynode-beans.json', 'etc/beans/demo-easynode-beans-1.json');"
            ],
            "class": "easynode.framework.BeanFactory"
        },
        {
            "file": "../src/easynode/framework/BeanFactory.js",
            "line": 66,
            "description": "根据bean ID获取Bean。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "bean ID。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bean实例。",
                "type": "Object"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n     yield BeanFactory.initialize('etc/beans/demo-easynode-beans.json', 'etc/beans/demo-easynode-beans-1.json');\n     var bean1 = BeanFactory.get('bean1');\n     bean1.name1 = 'zlbbq';\n     bean1 = BeanFactory.get('bean1');\n     console.log(bean.name1);                //zlbbq, 使用singleton或prototype来描述创建bean的行为模式是单例还是原型。"
            ],
            "class": "easynode.framework.BeanFactory"
        },
        {
            "file": "../src/easynode/framework/BeanFactory.js",
            "line": 91,
            "description": "放置一个单例bean至BeanFactory。可链式调用。",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "id",
                    "description": "bean ID。",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "bean实例。",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回BeanFactory类，可链式调用",
                "type": "easynode.framework.BeanFactory"
            },
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.framework.BeanFactory"
        },
        {
            "file": "../src/easynode/framework/Logger.js",
            "line": 27,
            "description": "静态实例",
            "itemtype": "property",
            "name": "instance",
            "access": "private",
            "tagname": "",
            "static": 1,
            "author": "zlbbq",
            "since": "0.1.0",
            "class": "easynode.framework.Logger"
        },
        {
            "file": "../src/easynode/framework/Logger.js",
            "line": 38,
            "description": "构造函数，私有的，使用静态函数getLogger()获取Logger实例。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "access": "private",
            "tagname": "",
            "class": "easynode.framework.Logger"
        },
        {
            "file": "../src/easynode/framework/Logger.js",
            "line": 89,
            "description": "获取一个Logger实例。Logger实例具有debug、info、warn、error、fatal五个函数，对应DEBUG、INFO、WARN、ERROR、FATAL五个日志级别。<br>\n <h5>Logger配置</h5>\n <pre>\n // appenders\n easynode.logger.appenders=root,access\n // root appender\n easynode.logger.appender.root.level=DEBUG\n easynode.logger.appender.root.file = app.log\n easynode.logger.appender.root.pattern=_yyyy-MM-dd\n easynode.logger.appender.root.maxSize=1024\n easynode.logger.appender.root.backup=10\n // access appender\n easynode.logger.appender.root.level=DEBUG\n easynode.logger.appender.root.file = access.log\n easynode.logger.appender.root.pattern=_yyyy-MM-dd\n easynode.logger.appender.root.maxSize=1024\n easynode.logger.appender.root.backup=10\n </pre>",
            "itemtype": "method",
            "name": "getLogger",
            "static": 1,
            "since": "0.1.0",
            "author": "zlbbq",
            "params": [
                {
                    "name": "name",
                    "description": "Logger名称，默认'root'。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Logger实例。",
                "type": "Logger"
            },
            "example": [
                "\n     var logger = using('easynode.framework.Logger').getLogger();\n     EasyNode.DEBUG && logger.debug('Hello, EasyNode');\n     logger.info('Hello, EasyNode');\n     logger.warn('Hello, EasyNode');\n     logger.error('Hello, EasyNode');\n     logger.fatal('Hello, EasyNode');",
                "\n     // 写access日志\n     var logger = using('easynode.framework.Logger').getLogger('access');\n     EasyNode.DEBUG && logger.debug('Hello, EasyNode');\n     logger.info('Hello, EasyNode');\n     logger.warn('Hello, EasyNode');\n     logger.error('Hello, EasyNode');\n     logger.fatal('Hello, EasyNode');"
            ],
            "class": "easynode.framework.Logger"
        },
        {
            "file": "../src/easynode/framework/Logger.js",
            "line": 139,
            "description": "获取指定文件名的Logger，它是Logger.getLogger()函数的语法糖，参考getLogger。",
            "itemtype": "method",
            "name": "forFile",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "请始终传递__filename",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Logger实例。",
                "type": "Logger"
            },
            "example": [
                "\n     var logger = using('easynode.framework.Logger').forFile(__filename);\n     EasyNode.DEBUG && logger.debug('Hello, EasyNode');\n     logger.info('Hello, EasyNode');\n     logger.warn('Hello, EasyNode');\n     logger.error('Hello, EasyNode');\n     logger.fatal('Hello, EasyNode');"
            ],
            "class": "easynode.framework.Logger"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 30,
            "description": "构造函数。PS: 因为操蛋的util.inherits会覆盖class中定义的成员，因此，这个类只能用ES5的function和prototype来实现了。",
            "itemtype": "method",
            "name": "构造函数",
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 43,
            "description": "emit函数的别名。参考：Node.js events.EventEmitter.emit()函数。",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "事件参数",
                    "type": "..."
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 56,
            "description": "removeListener函数的别名。参考：Node.js events.EventEmitter.removeListener()函数。",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "事件监听器",
                    "type": "Function"
                }
            ],
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 70,
            "description": "获取对象的字符串描述",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "对象的字符串描述",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 82,
            "description": "获取对象的全类名",
            "itemtype": "method",
            "name": "getClassName",
            "return": {
                "description": "对象的字符串描述",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 93,
            "description": "返回对象的JSON String表达式",
            "itemtype": "method",
            "name": "toJSONString",
            "return": {
                "description": "对象的JSON字符串描述",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 105,
            "description": "返回对象的JSON对象，即：Notation",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "对象的Notation",
                "type": "Object"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 133,
            "description": "判定对象是否属于某个类型",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "namespace",
                    "description": "全类名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对象是否为某个类的实例",
                "type": "Boolean"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n\nvar ExpressServer = using('easynode.framework.server.http.ExpressServer');\nnew ExpressServer(3010).is('easynode.framework.server.http.ExpressServer');  //true"
            ],
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/easynode/GenericObject.js",
            "line": 149,
            "description": "无操作函数。可链式调用。",
            "itemtype": "method",
            "name": "noop",
            "return": {
                "description": "this"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "example": [
                "\n\nvar ExpressServer = using('easynode.framework.server.http.ExpressServer');\nnew ExpressServer(3010).is('easynode.framework.server.http.ExpressServer');  //true"
            ],
            "class": "easynode.GenericObject"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 25,
            "description": "返回指定名称的namespace，使用JSON对象来模拟namespace。",
            "itemtype": "method",
            "name": "_getNamespace",
            "since": "0.1.0",
            "author": "zlbbq",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "namespace字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON模拟的namespace对象",
                "type": "Namespace"
            },
            "example": [
                "\n     var ns = _getNamespace('easynode.framework.Logger');                 //返回对象easynode.framework",
                "\n     var ns = _getNamespace('easynode.framework.*');                          //返回对象easynode.framework"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 51,
            "description": "初始化命名空间，using时自动调用。",
            "itemtype": "method",
            "name": "_initNamespaces",
            "since": "0.1.0",
            "author": "zlbbq",
            "access": "private",
            "tagname": "",
            "example": [
                "\n     require('../src/EasyNode.js');\n     EasyNode.addSourceDirectory('test', 'demo');                 // $EasyNode/test/,  $EasyNode/demo\n     EasyNode.using('easynode.framework.Logger');"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 102,
            "description": "字符串去两端空格。",
            "itemtype": "method",
            "name": "_trim",
            "since": "0.1.0",
            "author": "zlbbq",
            "access": "private",
            "tagname": "",
            "example": [
                "\n     console.log(_trim('   abc   '));                        //print : 'abc'"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 120,
            "description": "获取EasyNode的根目录。默认返回进程当前目录的父目录，因此需要在bin目录下启用nodejs；如果传递了命令行参数easynode-home，则返回该命令\n行参数指定的路径。",
            "itemtype": "method",
            "name": "home",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "return": {
                "description": "EasyNode根目录的绝对路径。",
                "type": "String"
            },
            "example": [
                "\n     //在bin目录下启动：babel-node ./main.js\n     console.log(EasyNode.home());                                            //print：/home/zlbbq/EasyNode"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 137,
            "description": "相对路径转绝对路径。",
            "itemtype": "method",
            "name": "EasyNode.real",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "p",
                    "description": "相对路径",
                    "type": "String"
                }
            ],
            "return": {
                "description": "绝对路径",
                "type": "String"
            },
            "example": [
                "\n     var path = 'src/EasyNode.js';\n     console.log(EasyNode.real(path));                //print : /home/zlbbq/EasyNode/src/EasyNode.js"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 154,
            "description": "JSON对象扩展，这个函数是underscore的extend函数的快捷方式，具体使用请参考underscore.extend()函数。",
            "itemtype": "method",
            "name": "extend",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "JSON对象",
                    "description": "",
                    "type": "..."
                }
            ],
            "example": [
                "\n     var o = { a : 'a' };\n     extend(o, { b : 'b'});          // o = { a : 'a', b : 'b'}"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 170,
            "description": "获取命令行参数。一个命令行参数需要定义在入口js文件之后，并且格式为--$key=$value。<br>\nbabel-node main.js --easynode.app.name=MyApp",
            "itemtype": "method",
            "name": "arg",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "name",
                    "description": "配置项key。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "配置值。",
                "type": "String"
            },
            "example": [
                "\n     命令行参数：babel-node main.js --easynode.app.name=YourApp\n     console.log(config('easynode.app.name'));                  //print : 'YourApp'"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 206,
            "description": "向EasyNode添加配置文件。配置文件需要位于$EasyNode/etc/目录，默认的配置文件为：EasyNode.conf。该文件始终在所有的配置文件生效前被加载 。",
            "itemtype": "method",
            "name": "addConfigFile",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "",
                    "description": "配置文件名，可一次添加多个文件。",
                    "type": "String",
                    "multiple": true
                }
            ],
            "throws": {
                "description": "配置文件不存在。{TypeError} 参数非String类型。",
                "type": "Error"
            },
            "example": [
                "\n     require('../src/EasyNode.js');\n     EasyNode.addConfigFile('app.conf', 'app1.conf', 'app2.conf');            // etc/app.conf, etc/app1.conf, etc/app2.conf\n     EasyNode.console.log(config('easynode.app.name'));"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 244,
            "description": "获取配置文件中的配置参数。配置参数默认为etc/EasyNode.conf，可以通过EasyNode.addConfigFile向EasyNode添加配置文件。<br>\n注意：如果命令行参数与配置项具有相同的key，则返回命令行参数值。",
            "itemtype": "method",
            "name": "config",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "name",
                    "description": "配置项key。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "配置值。如果不传递任何参数，EasyNode则会加载配置文件，但不会返回任何值。",
                "type": "String"
            },
            "example": [
                "\n     配置文件：etc/EasyNode.conf  ==> easynode.app.name = MyApp\n     console.log(config('easynode.app.name'));                  //print : 'MyApp'\n\n     命令行参数：babel-node main.js --easynode.app.name=YourApp\n     console.log(EasyNode.config('easynode.app.name'));                  //print : 'YourApp'"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 297,
            "description": "获取字符串表，国际化支持。配置文件：etc/i18n_$locale.conf，格式与EasyNode.conf相同。",
            "itemtype": "method",
            "name": "i18n",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "name",
                    "description": "国际化字符串配置项key。",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "如果传递此值，请始终传递__filename，__filename会被转成namespace(file) + '.' + name;",
                    "type": "String"
                }
            ],
            "return": {
                "description": "配置值。如果不传递任何参数，EasyNode则会加载国际化配置文件，但不会返回任何值。",
                "type": "String"
            },
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 366,
            "description": "设置i18n Locale，系统默认'zh_CN'，i18n默认读取的配置文件为etc/i18n/$locale.conf，如：etc/i18n/zh_CN.conf。\n在使用i18n函数前调用此函数才能正确设置语言。",
            "itemtype": "method",
            "name": "setLocale",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "params": [
                {
                    "name": "locale",
                    "description": "地区字符串。",
                    "type": "String"
                }
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 379,
            "description": "获取i18n Locale，系统默认'zh_CN'，可通过启动参数--locale指定地区字符串\n--locale=zh_CN",
            "itemtype": "method",
            "name": "getLocale",
            "since": "0.1.0",
            "static": 1,
            "author": "zlbbq",
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 392,
            "description": "获取文件的命名空间名称或全类名。",
            "itemtype": "method",
            "name": "namespace",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "建议在源码文件中使用__filename或__dirname。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "命名空间名称或全类名。",
                "type": "String"
            },
            "throws": {
                "description": "源码文件不在src目录中。",
                "type": "Error"
            },
            "example": [
                "\n     //文件：src/easynode.framework.Logger.js\n     console.log(EasyNode.namespace(__filename));             //print : easynode.framework.Logger\n     console.log(EasyNode.namespace(__dirname));              //print : easynode.framework"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 416,
            "description": "引用一个类、模块或者一个命名空间下所有的类或模块，取决于Node.js的导出。",
            "itemtype": "method",
            "name": "using",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "全类名或命名空间名。",
                    "type": "String"
                },
                {
                    "name": "throwError",
                    "description": "是否在类或命名空间未找到时抛出异常，默认为true，当throwError为false时，如果没有找到相应的类或命名空间则返回null",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "类，对象，或命名空间对象。",
                "type": "Object"
            },
            "example": [
                "\n     //引用一个类\n     EasyNode.using('easynode.framework.Logger');\n\n     //引用easynode.framework命名空间下所有的类。\n     EasyNode.using('easynode.framework.*');",
                "\n     var Logger = EasyNode.using('easynode.framework.Logger');\n     Logger.getLogger().info('Hello, EasyNode');",
                "\n     EasyNode.using('easynode.framework.Logger');\n     easynode.framework.Logger.getLogger().info('Hello, EasyNode');",
                "\n     var ns = using('easynode.framework.*');\n     ns.Logger.getLogger().info('Hello, EasyNode');"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 536,
            "description": "获取指定命名空间或全类名的绝对路径。",
            "itemtype": "method",
            "name": "namespace2Path",
            "since": "0.1.0",
            "author": "zlbbq",
            "async": 1,
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "命名空间或全类名。easynode.GenericObject",
                    "type": "String"
                }
            ],
            "throws": {
                "description": "源码目录不存在。{TypeError} 参数非String类型。",
                "type": "Error"
            },
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 591,
            "description": "向EasyNode添加一个源码目录，使用using引用一个类、对象或命名空间时，EasyNode在所有的源码目录下查找同\n名的目录或js文件，默认的源码目录为：$EasyNode/src/。\n<h5>注意：为了识别不同目录下的命名空间，源码目录必须以'src'结尾的目录</h5>",
            "itemtype": "method",
            "name": "addSourceDirectory",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "",
                    "description": "源码目录，相对于EasyNode根目录。可一次添加多个源码目录。",
                    "type": "String",
                    "multiple": true
                }
            ],
            "throws": {
                "description": "源码目录不存在。{TypeError} 参数非String类型。",
                "type": "Error"
            },
            "example": [
                "\n     require('../src/EasyNode.js');\n     EasyNode.addSourceDirectory('test', 'demo');                 // $EasyNode/test/,  $EasyNode/demo"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 632,
            "description": "创建一个实例，指定的namespace必须是一个全类名。即：Node.js的导出对象是一个类，或者是ES5的函数。\n<h5>注意，该类必须能够通过无参构造器实例化。</h5>",
            "itemtype": "method",
            "name": "create",
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "全类名",
                    "type": "String"
                }
            ],
            "example": [
                "\n     require('../src/EasyNode.js');\n     var plugin = EasyNode.create('easynode.framework.plugin.EasyNodePlugin');\n     console.log(plugin.toJSON());"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 651,
            "description": "获取本机第一块以ethx命名的网卡的配置的第一个IP地址。",
            "itemtype": "method",
            "name": "getLocalIP",
            "return": {
                "description": "本地IP地址",
                "type": "String"
            },
            "since": "0.1.0",
            "author": "zlbbq",
            "static": 1,
            "example": [
                "\n     require('../src/EasyNode.js');\n     var plugin = EasyNode.create('easynode.framework.plugin.EasyNodePlugin');\n     console.log(plugin.toJSON());"
            ],
            "class": "EasyNode"
        },
        {
            "file": "../src/EasyNode.js",
            "line": 689,
            "description": "引用一个类、对象或者一个命名空间下所有的类或对象。类或对象取决于nodejs的module.exports导出了什么。<br>\n        <h3>这是EasyNode.using函数的快捷方式</h3>",
            "itemtype": "method",
            "name": "using",
            "since": "0.1.0",
            "author": "zlbbq",
            "params": [
                {
                    "name": "name",
                    "description": "全类名或命名空间名。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "类，对象，或命名空间对象。",
                "type": "Object"
            },
            "example": [
                "\n     //引用一个类\n     using('easynode.framework.Logger');\n\n     //引用easynode.framework命名空间下所有的类。\n     using('easynode.framework.*');",
                "\n     var Logger = using('easynode.framework.Logger');\n     Logger.getLogger().info('Hello, EasyNode');",
                "\n     using('easynode.framework.Logger');\n     easynode.framework.Logger.getLogger().info('Hello, EasyNode');",
                "\n     var ns = using('easynode.framework.*');\n     ns.Logger.getLogger().info('Hello, EasyNode');"
            ],
            "class": "全局函数"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/db/IDataSource.js:16"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/db/IDataSource.js:29"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/db/IDataSource.js:41"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/db/IDataSource.js:55"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/db/IDataSource.js:69"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/IQueue.js:27"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/IQueue.js:43"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/IQueue.js:60"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/MQTTQueue.js:96"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/MQTTQueue.js:110"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/MQTTQueue.js:154"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/MQTTQueue.js:208"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisListQueue.js:62"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisListQueue.js:92"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisListQueue.js:155"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisQueue.js:48"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisQueue.js:78"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mq/RedisQueue.js:114"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/Action.js:9"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionContext.js:7"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionContext.js:136"
        },
        {
            "message": "param name/type/descript missing",
            "line": " ../src/easynode/framework/mvc/ActionFactory.js:321"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionRequestParameter.js:7"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionRequestParameter.js:28"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionRequestParameter.js:44"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionRequestParameter.js:60"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ActionRequestParameter.js:108"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/CombinedAction.js:8"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/IActionContextListener.js:15"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/IActionContextListener.js:29"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/IActionContextListener.js:43"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/IActionContextListener.js:57"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/ITemplateViewRenderer.js:16"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/JSONView.js:27"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/JSONView.js:40"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/Model.js:39"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/View.js:27"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/mvc/View.js:40"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/http/KOAActionContext.js:106"
        },
        {
            "message": "unknown tag: autho",
            "line": " ../src/easynode/framework/server/http/KOAHttpServer.js:288"
        },
        {
            "message": "unknown tag: overwrite",
            "line": " ../src/easynode/framework/server/http/KOAHttpServer.js:774"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/http/KOAHttpServer.js:933"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/http/KOAHttpServer.js:947"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/http/KOAHttpServer.js:964"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/tcp/Decoder.js:28"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/tcp/Encoder.js:28"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/tcp/MessageHandler.js:28"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:162"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:175"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:191"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:204"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:217"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:230"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:242"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:256"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:270"
        },
        {
            "message": "unknown tag: abstract",
            "line": " ../src/easynode/framework/server/AbstractServer.js:287"
        },
        {
            "message": "Missing item type\nCreated by hujiabao on 8/19/15.",
            "line": " ../src/easynode/framework/util/MyError2.js:1"
        }
    ]
}